// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: nhms.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from nhms.proto</summary>
public static partial class NhmsReflection
{

    #region Descriptor
    /// <summary>File descriptor for nhms.proto</summary>
    public static pbr::FileDescriptor Descriptor
    {
        get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NhmsReflection()
    {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            string.Concat(
              "CgpuaG1zLnByb3RvIgYKBFZvaWQiMAoNU3RhdHVzTWVzc2FnZRIOCgZzdGF0",
              "dXMYASABKAUSDwoHbWVzc2FnZRgCIAEoCSIfCgxDb25zb2xlUHJpbnQSDwoH",
              "bWVzc2FnZRgBIAEoCSJDCghTTUFFbnRyeRIUCgxhbGdvcml0aG1faWQYASAB",
              "KAUSDgoGcGF5aW5nGAIgASgBEhEKCWlzX3N0YWJsZRgDIAEoCCIoCgpTTUFF",
              "bnRyaWVzEhoKB2VudHJpZXMYASADKAsyCS5TTUFFbnRyeSL7AwoKRGV2aWNl",
              "SW5mbxIRCglkZXZpY2VfaWQYASABKAkSDAoEbmFtZRgCIAEoCRIeCgR0eXBl",
              "GAMgASgOMhAuRGV2aWNlSW5mby5UeXBlEiIKBnZlbmRvchgEIAEoDjISLkRl",
              "dmljZUluZm8uVmVuZG9yEg8KB2VuYWJsZWQYBSABKAgSIgoGc3RhdHVzGAYg",
              "ASgOMhIuRGV2aWNlSW5mby5TdGF0dXMSEwoLdGVtcGVyYXR1cmUYByABKAES",
              "DAoEbG9hZBgIIAEoARIRCglmYW5fc3BlZWQYCSABKAUSFQoNbWluX2Zhbl9z",
              "cGVlZBgKIAEoBRIVCg1tYXhfZmFuX3NwZWVkGAsgASgFIjIKBFR5cGUSGAoU",
              "VFlQRV9OT1RfU0VUX0lOVkFMSUQQABIHCgNDUFUQARIHCgNHUFUQAiJECgZW",
              "ZW5kb3ISGgoWVkVORE9SX05PVF9TRVRfSU5WQUxJRBAAEgcKA0FNRBABEgoK",
              "Bk5WSURJQRACEgkKBUlOVEVMEAMidQoGU3RhdHVzEhoKFlNUQVRVU19OT1Rf",
              "U0VUX0lOVkFMSUQQABILCgdQRU5ESU5HEAESCwoHU1RPUFBFRBACEgoKBk1J",
              "TklORxADEhAKDEJFTkNITUFSS0lORxAEEgkKBUVSUk9SEAUSDAoIRElTQUJM",
              "RUQQBiIsCgxEZXZpY2VzSW5mb3MSHAoHZGV2aWNlcxgBIAMoCzILLkRldmlj",
              "ZUluZm8iHQoIRGV2aWNlSUQSEQoJZGV2aWNlX2lkGAEgASgJIjkKEVNldERl",
              "dmljZUZhblNwZWVkEhEKCWRldmljZV9pZBgBIAEoCRIRCglmYW5fc3BlZWQY",
              "AiABKAUixgMKEk1pbmVyQWxnb3JpdGhtUGFpchIVCg1hbGdvcml0aG1faWRz",
              "GAEgAygFEhYKDmFsZ29yaXRobV9uYW1lGAIgASgJEhAKCG1pbmVyX2lkGAMg",
              "ASgJEhIKCm1pbmVyX25hbWUYBCABKAkSDwoHZW5hYmxlZBgFIAEoCBIaChJi",
              "ZW5jaG1hcmtlZF9zcGVlZHMYBiADKAESHAoUYWN0aXZlX21pbmluZ19zcGVl",
              "ZHMYByADKAESGQoRcG93ZXJfY29uc3VtcHRpb24YCCABKAUSHwoXZXh0cmFf",
              "bGF1bmNoX3BhcmFtZXRlcnMYCSABKAkSKgoGc3RhdHVzGAogASgOMhouTWlu",
              "ZXJBbGdvcml0aG1QYWlyLlN0YXR1cyKnAQoGU3RhdHVzEhoKFlNUQVRVU19O",
              "T1RfU0VUX0lOVkFMSUQQABIMCghESVNBQkxFRBABEhAKDE5PX0JFTkNITUFS",
              "SxACEg8KC0JFTkNITUFSS0VEEAMSEAoMUkVfQkVOQ0hNQVJLEAQSFQoRQkVO",
              "Q0hNQVJLX1BFTkRJTkcQBRIQCgxCRU5DSE1BUktJTkcQBhIKCgZNSU5JTkcQ",
              "BxIJCgVFUlJPUhAIIoEBChREZXZpY2VBbGdvcml0aG1zSW5mbxIRCglkZXZp",
              "Y2VfaWQYASABKAkSLQoQbWluaW5nX2FsZ29yaXRobRgCIAEoCzITLk1pbmVy",
              "QWxnb3JpdGhtUGFpchInCgphbGdvcml0aG1zGAMgAygLMhMuTWluZXJBbGdv",
              "cml0aG1QYWlyIkMKEURldmljZXNBbGdvcml0aG1zEi4KD2VuYWJsZWRfZGV2",
              "aWNlcxgBIAMoCzIVLkRldmljZUFsZ29yaXRobXNJbmZvIlUKF1VwZGF0ZURl",
              "dmljZU1pbmluZ1N0YXRlEhEKCWRldmljZV9pZBgBIAEoCRIVCg1hbGdvcml0",
              "aG1faWRzGAIgAygFEhAKCG1pbmVyX2lkGAMgASgJIjsKFVNldERldmljZUVu",
              "YWJsZWRTdGF0ZRIRCglkZXZpY2VfaWQYASABKAkSDwoHZW5hYmxlZBgCIAEo",
              "CCJ2CidTZXREZXZpY2VNaW5lckFsZ29yaXRobVBhaXJFbmFibGVkU3RhdGUS",
              "EQoJZGV2aWNlX2lkGAEgASgJEhUKDWFsZ29yaXRobV9pZHMYAiADKAUSEAoI",
              "bWluZXJfaWQYAyABKAkSDwoHZW5hYmxlZBgEIAEoCGIGcHJvdG8z"));
        descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
            new pbr::FileDescriptor[] { },
            new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Void), global::Void.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::StatusMessage), global::StatusMessage.Parser, new[]{ "Status", "Message" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ConsolePrint), global::ConsolePrint.Parser, new[]{ "Message" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SMAEntry), global::SMAEntry.Parser, new[]{ "AlgorithmId", "Paying", "IsStable" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SMAEntries), global::SMAEntries.Parser, new[]{ "Entries" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DeviceInfo), global::DeviceInfo.Parser, new[]{ "DeviceId", "Name", "Type", "Vendor", "Enabled", "Status", "Temperature", "Load", "FanSpeed", "MinFanSpeed", "MaxFanSpeed" }, null, new[]{ typeof(global::DeviceInfo.Types.Type), typeof(global::DeviceInfo.Types.Vendor), typeof(global::DeviceInfo.Types.Status) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DevicesInfos), global::DevicesInfos.Parser, new[]{ "Devices" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DeviceID), global::DeviceID.Parser, new[]{ "DeviceId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SetDeviceFanSpeed), global::SetDeviceFanSpeed.Parser, new[]{ "DeviceId", "FanSpeed" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MinerAlgorithmPair), global::MinerAlgorithmPair.Parser, new[]{ "AlgorithmIds", "AlgorithmName", "MinerId", "MinerName", "Enabled", "BenchmarkedSpeeds", "ActiveMiningSpeeds", "PowerConsumption", "ExtraLaunchParameters", "Status" }, null, new[]{ typeof(global::MinerAlgorithmPair.Types.Status) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DeviceAlgorithmsInfo), global::DeviceAlgorithmsInfo.Parser, new[]{ "DeviceId", "MiningAlgorithm", "Algorithms" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DevicesAlgorithms), global::DevicesAlgorithms.Parser, new[]{ "EnabledDevices" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UpdateDeviceMiningState), global::UpdateDeviceMiningState.Parser, new[]{ "DeviceId", "AlgorithmIds", "MinerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SetDeviceEnabledState), global::SetDeviceEnabledState.Parser, new[]{ "DeviceId", "Enabled" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SetDeviceMinerAlgorithmPairEnabledState), global::SetDeviceMinerAlgorithmPairEnabledState.Parser, new[]{ "DeviceId", "AlgorithmIds", "MinerId", "Enabled" }, null, null, null, null)
            }));
    }
    #endregion

}
#region Messages
public sealed partial class Void : pb::IMessage<Void>
{
    private static readonly pb::MessageParser<Void> _parser = new pb::MessageParser<Void>(() => new Void());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Void> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::NhmsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Void()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Void(Void other) : this()
    {
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Void Clone()
    {
        return new Void(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as Void);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Void other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Void other)
    {
        if (other == null)
        {
            return;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
            }
        }
    }

}

/// <summary>
/// TODO error message
/// </summary>
public sealed partial class StatusMessage : pb::IMessage<StatusMessage>
{
    private static readonly pb::MessageParser<StatusMessage> _parser = new pb::MessageParser<StatusMessage>(() => new StatusMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::NhmsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusMessage()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusMessage(StatusMessage other) : this()
    {
        status_ = other.status_;
        message_ = other.message_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusMessage Clone()
    {
        return new StatusMessage(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status
    {
        get { return status_; }
        set
        {
            status_ = value;
        }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message
    {
        get { return message_; }
        set
        {
            message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as StatusMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusMessage other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Status != other.Status) return false;
        if (Message != other.Message) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Status != 0) hash ^= Status.GetHashCode();
        if (Message.Length != 0) hash ^= Message.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Status != 0)
        {
            output.WriteRawTag(8);
            output.WriteInt32(Status);
        }
        if (Message.Length != 0)
        {
            output.WriteRawTag(18);
            output.WriteString(Message);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Status != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
        }
        if (Message.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusMessage other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Status != 0)
        {
            Status = other.Status;
        }
        if (other.Message.Length != 0)
        {
            Message = other.Message;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        Status = input.ReadInt32();
                        break;
                    }
                case 18:
                    {
                        Message = input.ReadString();
                        break;
                    }
            }
        }
    }

}

public sealed partial class ConsolePrint : pb::IMessage<ConsolePrint>
{
    private static readonly pb::MessageParser<ConsolePrint> _parser = new pb::MessageParser<ConsolePrint>(() => new ConsolePrint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConsolePrint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::NhmsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsolePrint()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsolePrint(ConsolePrint other) : this()
    {
        message_ = other.message_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsolePrint Clone()
    {
        return new ConsolePrint(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message
    {
        get { return message_; }
        set
        {
            message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as ConsolePrint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConsolePrint other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Message != other.Message) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Message.Length != 0) hash ^= Message.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Message.Length != 0)
        {
            output.WriteRawTag(10);
            output.WriteString(Message);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Message.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConsolePrint other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Message.Length != 0)
        {
            Message = other.Message;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        Message = input.ReadString();
                        break;
                    }
            }
        }
    }

}

public sealed partial class SMAEntry : pb::IMessage<SMAEntry>
{
    private static readonly pb::MessageParser<SMAEntry> _parser = new pb::MessageParser<SMAEntry>(() => new SMAEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SMAEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::NhmsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SMAEntry()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SMAEntry(SMAEntry other) : this()
    {
        algorithmId_ = other.algorithmId_;
        paying_ = other.paying_;
        isStable_ = other.isStable_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SMAEntry Clone()
    {
        return new SMAEntry(this);
    }

    /// <summary>Field number for the "algorithm_id" field.</summary>
    public const int AlgorithmIdFieldNumber = 1;
    private int algorithmId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AlgorithmId
    {
        get { return algorithmId_; }
        set
        {
            algorithmId_ = value;
        }
    }

    /// <summary>Field number for the "paying" field.</summary>
    public const int PayingFieldNumber = 2;
    private double paying_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Paying
    {
        get { return paying_; }
        set
        {
            paying_ = value;
        }
    }

    /// <summary>Field number for the "is_stable" field.</summary>
    public const int IsStableFieldNumber = 3;
    private bool isStable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStable
    {
        get { return isStable_; }
        set
        {
            isStable_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as SMAEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SMAEntry other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (AlgorithmId != other.AlgorithmId) return false;
        if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Paying, other.Paying)) return false;
        if (IsStable != other.IsStable) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (AlgorithmId != 0) hash ^= AlgorithmId.GetHashCode();
        if (Paying != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Paying);
        if (IsStable != false) hash ^= IsStable.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (AlgorithmId != 0)
        {
            output.WriteRawTag(8);
            output.WriteInt32(AlgorithmId);
        }
        if (Paying != 0D)
        {
            output.WriteRawTag(17);
            output.WriteDouble(Paying);
        }
        if (IsStable != false)
        {
            output.WriteRawTag(24);
            output.WriteBool(IsStable);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (AlgorithmId != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(AlgorithmId);
        }
        if (Paying != 0D)
        {
            size += 1 + 8;
        }
        if (IsStable != false)
        {
            size += 1 + 1;
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SMAEntry other)
    {
        if (other == null)
        {
            return;
        }
        if (other.AlgorithmId != 0)
        {
            AlgorithmId = other.AlgorithmId;
        }
        if (other.Paying != 0D)
        {
            Paying = other.Paying;
        }
        if (other.IsStable != false)
        {
            IsStable = other.IsStable;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        AlgorithmId = input.ReadInt32();
                        break;
                    }
                case 17:
                    {
                        Paying = input.ReadDouble();
                        break;
                    }
                case 24:
                    {
                        IsStable = input.ReadBool();
                        break;
                    }
            }
        }
    }

}

public sealed partial class SMAEntries : pb::IMessage<SMAEntries>
{
    private static readonly pb::MessageParser<SMAEntries> _parser = new pb::MessageParser<SMAEntries>(() => new SMAEntries());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SMAEntries> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::NhmsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SMAEntries()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SMAEntries(SMAEntries other) : this()
    {
        entries_ = other.entries_.Clone();
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SMAEntries Clone()
    {
        return new SMAEntries(this);
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SMAEntry> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(10, global::SMAEntry.Parser);
    private readonly pbc::RepeatedField<global::SMAEntry> entries_ = new pbc::RepeatedField<global::SMAEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SMAEntry> Entries
    {
        get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as SMAEntries);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SMAEntries other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (!entries_.Equals(other.entries_)) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        hash ^= entries_.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        entries_.WriteTo(output, _repeated_entries_codec);
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        size += entries_.CalculateSize(_repeated_entries_codec);
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SMAEntries other)
    {
        if (other == null)
        {
            return;
        }
        entries_.Add(other.entries_);
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        entries_.AddEntriesFrom(input, _repeated_entries_codec);
                        break;
                    }
            }
        }
    }

}

public sealed partial class DeviceInfo : pb::IMessage<DeviceInfo>
{
    private static readonly pb::MessageParser<DeviceInfo> _parser = new pb::MessageParser<DeviceInfo>(() => new DeviceInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::NhmsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceInfo()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceInfo(DeviceInfo other) : this()
    {
        deviceId_ = other.deviceId_;
        name_ = other.name_;
        type_ = other.type_;
        vendor_ = other.vendor_;
        enabled_ = other.enabled_;
        status_ = other.status_;
        temperature_ = other.temperature_;
        load_ = other.load_;
        fanSpeed_ = other.fanSpeed_;
        minFanSpeed_ = other.minFanSpeed_;
        maxFanSpeed_ = other.maxFanSpeed_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceInfo Clone()
    {
        return new DeviceInfo(this);
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 1;
    private string deviceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId
    {
        get { return deviceId_; }
        set
        {
            deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name
    {
        get { return name_; }
        set
        {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::DeviceInfo.Types.Type type_ = global::DeviceInfo.Types.Type.NotSetInvalid;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DeviceInfo.Types.Type Type
    {
        get { return type_; }
        set
        {
            type_ = value;
        }
    }

    /// <summary>Field number for the "vendor" field.</summary>
    public const int VendorFieldNumber = 4;
    private global::DeviceInfo.Types.Vendor vendor_ = global::DeviceInfo.Types.Vendor.NotSetInvalid;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DeviceInfo.Types.Vendor Vendor
    {
        get { return vendor_; }
        set
        {
            vendor_ = value;
        }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 5;
    private bool enabled_;
    /// <summary>
    /// status_info
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled
    {
        get { return enabled_; }
        set
        {
            enabled_ = value;
        }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 6;
    private global::DeviceInfo.Types.Status status_ = global::DeviceInfo.Types.Status.NotSetInvalid;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DeviceInfo.Types.Status Status
    {
        get { return status_; }
        set
        {
            status_ = value;
        }
    }

    /// <summary>Field number for the "temperature" field.</summary>
    public const int TemperatureFieldNumber = 7;
    private double temperature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Temperature
    {
        get { return temperature_; }
        set
        {
            temperature_ = value;
        }
    }

    /// <summary>Field number for the "load" field.</summary>
    public const int LoadFieldNumber = 8;
    private double load_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Load
    {
        get { return load_; }
        set
        {
            load_ = value;
        }
    }

    /// <summary>Field number for the "fan_speed" field.</summary>
    public const int FanSpeedFieldNumber = 9;
    private int fanSpeed_;
    /// <summary>
    /// fan_speed_info 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FanSpeed
    {
        get { return fanSpeed_; }
        set
        {
            fanSpeed_ = value;
        }
    }

    /// <summary>Field number for the "min_fan_speed" field.</summary>
    public const int MinFanSpeedFieldNumber = 10;
    private int minFanSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinFanSpeed
    {
        get { return minFanSpeed_; }
        set
        {
            minFanSpeed_ = value;
        }
    }

    /// <summary>Field number for the "max_fan_speed" field.</summary>
    public const int MaxFanSpeedFieldNumber = 11;
    private int maxFanSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxFanSpeed
    {
        get { return maxFanSpeed_; }
        set
        {
            maxFanSpeed_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as DeviceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceInfo other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (DeviceId != other.DeviceId) return false;
        if (Name != other.Name) return false;
        if (Type != other.Type) return false;
        if (Vendor != other.Vendor) return false;
        if (Enabled != other.Enabled) return false;
        if (Status != other.Status) return false;
        if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Temperature, other.Temperature)) return false;
        if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Load, other.Load)) return false;
        if (FanSpeed != other.FanSpeed) return false;
        if (MinFanSpeed != other.MinFanSpeed) return false;
        if (MaxFanSpeed != other.MaxFanSpeed) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
        if (Name.Length != 0) hash ^= Name.GetHashCode();
        if (Type != global::DeviceInfo.Types.Type.NotSetInvalid) hash ^= Type.GetHashCode();
        if (Vendor != global::DeviceInfo.Types.Vendor.NotSetInvalid) hash ^= Vendor.GetHashCode();
        if (Enabled != false) hash ^= Enabled.GetHashCode();
        if (Status != global::DeviceInfo.Types.Status.NotSetInvalid) hash ^= Status.GetHashCode();
        if (Temperature != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Temperature);
        if (Load != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Load);
        if (FanSpeed != 0) hash ^= FanSpeed.GetHashCode();
        if (MinFanSpeed != 0) hash ^= MinFanSpeed.GetHashCode();
        if (MaxFanSpeed != 0) hash ^= MaxFanSpeed.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (DeviceId.Length != 0)
        {
            output.WriteRawTag(10);
            output.WriteString(DeviceId);
        }
        if (Name.Length != 0)
        {
            output.WriteRawTag(18);
            output.WriteString(Name);
        }
        if (Type != global::DeviceInfo.Types.Type.NotSetInvalid)
        {
            output.WriteRawTag(24);
            output.WriteEnum((int)Type);
        }
        if (Vendor != global::DeviceInfo.Types.Vendor.NotSetInvalid)
        {
            output.WriteRawTag(32);
            output.WriteEnum((int)Vendor);
        }
        if (Enabled != false)
        {
            output.WriteRawTag(40);
            output.WriteBool(Enabled);
        }
        if (Status != global::DeviceInfo.Types.Status.NotSetInvalid)
        {
            output.WriteRawTag(48);
            output.WriteEnum((int)Status);
        }
        if (Temperature != 0D)
        {
            output.WriteRawTag(57);
            output.WriteDouble(Temperature);
        }
        if (Load != 0D)
        {
            output.WriteRawTag(65);
            output.WriteDouble(Load);
        }
        if (FanSpeed != 0)
        {
            output.WriteRawTag(72);
            output.WriteInt32(FanSpeed);
        }
        if (MinFanSpeed != 0)
        {
            output.WriteRawTag(80);
            output.WriteInt32(MinFanSpeed);
        }
        if (MaxFanSpeed != 0)
        {
            output.WriteRawTag(88);
            output.WriteInt32(MaxFanSpeed);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (DeviceId.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
        }
        if (Name.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
        }
        if (Type != global::DeviceInfo.Types.Type.NotSetInvalid)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
        }
        if (Vendor != global::DeviceInfo.Types.Vendor.NotSetInvalid)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Vendor);
        }
        if (Enabled != false)
        {
            size += 1 + 1;
        }
        if (Status != global::DeviceInfo.Types.Status.NotSetInvalid)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Status);
        }
        if (Temperature != 0D)
        {
            size += 1 + 8;
        }
        if (Load != 0D)
        {
            size += 1 + 8;
        }
        if (FanSpeed != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(FanSpeed);
        }
        if (MinFanSpeed != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinFanSpeed);
        }
        if (MaxFanSpeed != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxFanSpeed);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceInfo other)
    {
        if (other == null)
        {
            return;
        }
        if (other.DeviceId.Length != 0)
        {
            DeviceId = other.DeviceId;
        }
        if (other.Name.Length != 0)
        {
            Name = other.Name;
        }
        if (other.Type != global::DeviceInfo.Types.Type.NotSetInvalid)
        {
            Type = other.Type;
        }
        if (other.Vendor != global::DeviceInfo.Types.Vendor.NotSetInvalid)
        {
            Vendor = other.Vendor;
        }
        if (other.Enabled != false)
        {
            Enabled = other.Enabled;
        }
        if (other.Status != global::DeviceInfo.Types.Status.NotSetInvalid)
        {
            Status = other.Status;
        }
        if (other.Temperature != 0D)
        {
            Temperature = other.Temperature;
        }
        if (other.Load != 0D)
        {
            Load = other.Load;
        }
        if (other.FanSpeed != 0)
        {
            FanSpeed = other.FanSpeed;
        }
        if (other.MinFanSpeed != 0)
        {
            MinFanSpeed = other.MinFanSpeed;
        }
        if (other.MaxFanSpeed != 0)
        {
            MaxFanSpeed = other.MaxFanSpeed;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        DeviceId = input.ReadString();
                        break;
                    }
                case 18:
                    {
                        Name = input.ReadString();
                        break;
                    }
                case 24:
                    {
                        Type = (global::DeviceInfo.Types.Type)input.ReadEnum();
                        break;
                    }
                case 32:
                    {
                        Vendor = (global::DeviceInfo.Types.Vendor)input.ReadEnum();
                        break;
                    }
                case 40:
                    {
                        Enabled = input.ReadBool();
                        break;
                    }
                case 48:
                    {
                        Status = (global::DeviceInfo.Types.Status)input.ReadEnum();
                        break;
                    }
                case 57:
                    {
                        Temperature = input.ReadDouble();
                        break;
                    }
                case 65:
                    {
                        Load = input.ReadDouble();
                        break;
                    }
                case 72:
                    {
                        FanSpeed = input.ReadInt32();
                        break;
                    }
                case 80:
                    {
                        MinFanSpeed = input.ReadInt32();
                        break;
                    }
                case 88:
                    {
                        MaxFanSpeed = input.ReadInt32();
                        break;
                    }
            }
        }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DeviceInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types
    {
        public enum Type
        {
            [pbr::OriginalName("TYPE_NOT_SET_INVALID")] NotSetInvalid = 0,
            [pbr::OriginalName("CPU")] Cpu = 1,
            [pbr::OriginalName("GPU")] Gpu = 2,
        }

        public enum Vendor
        {
            [pbr::OriginalName("VENDOR_NOT_SET_INVALID")] NotSetInvalid = 0,
            [pbr::OriginalName("AMD")] Amd = 1,
            [pbr::OriginalName("NVIDIA")] Nvidia = 2,
            [pbr::OriginalName("INTEL")] Intel = 3,
        }

        public enum Status
        {
            [pbr::OriginalName("STATUS_NOT_SET_INVALID")] NotSetInvalid = 0,
            [pbr::OriginalName("PENDING")] Pending = 1,
            [pbr::OriginalName("STOPPED")] Stopped = 2,
            [pbr::OriginalName("MINING")] Mining = 3,
            [pbr::OriginalName("BENCHMARKING")] Benchmarking = 4,
            [pbr::OriginalName("ERROR")] Error = 5,
            [pbr::OriginalName("DISABLED")] Disabled = 6,
        }

    }
    #endregion

}

/// <summary>
/// all devices
/// </summary>
public sealed partial class DevicesInfos : pb::IMessage<DevicesInfos>
{
    private static readonly pb::MessageParser<DevicesInfos> _parser = new pb::MessageParser<DevicesInfos>(() => new DevicesInfos());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DevicesInfos> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::NhmsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DevicesInfos()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DevicesInfos(DevicesInfos other) : this()
    {
        devices_ = other.devices_.Clone();
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DevicesInfos Clone()
    {
        return new DevicesInfos(this);
    }

    /// <summary>Field number for the "devices" field.</summary>
    public const int DevicesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::DeviceInfo> _repeated_devices_codec
        = pb::FieldCodec.ForMessage(10, global::DeviceInfo.Parser);
    private readonly pbc::RepeatedField<global::DeviceInfo> devices_ = new pbc::RepeatedField<global::DeviceInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DeviceInfo> Devices
    {
        get { return devices_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as DevicesInfos);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DevicesInfos other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (!devices_.Equals(other.devices_)) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        hash ^= devices_.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        devices_.WriteTo(output, _repeated_devices_codec);
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        size += devices_.CalculateSize(_repeated_devices_codec);
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DevicesInfos other)
    {
        if (other == null)
        {
            return;
        }
        devices_.Add(other.devices_);
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        devices_.AddEntriesFrom(input, _repeated_devices_codec);
                        break;
                    }
            }
        }
    }

}

public sealed partial class DeviceID : pb::IMessage<DeviceID>
{
    private static readonly pb::MessageParser<DeviceID> _parser = new pb::MessageParser<DeviceID>(() => new DeviceID());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceID> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::NhmsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceID()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceID(DeviceID other) : this()
    {
        deviceId_ = other.deviceId_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceID Clone()
    {
        return new DeviceID(this);
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 1;
    private string deviceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId
    {
        get { return deviceId_; }
        set
        {
            deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as DeviceID);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceID other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (DeviceId != other.DeviceId) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (DeviceId.Length != 0)
        {
            output.WriteRawTag(10);
            output.WriteString(DeviceId);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (DeviceId.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceID other)
    {
        if (other == null)
        {
            return;
        }
        if (other.DeviceId.Length != 0)
        {
            DeviceId = other.DeviceId;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        DeviceId = input.ReadString();
                        break;
                    }
            }
        }
    }

}

public sealed partial class SetDeviceFanSpeed : pb::IMessage<SetDeviceFanSpeed>
{
    private static readonly pb::MessageParser<SetDeviceFanSpeed> _parser = new pb::MessageParser<SetDeviceFanSpeed>(() => new SetDeviceFanSpeed());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetDeviceFanSpeed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::NhmsReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeviceFanSpeed()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeviceFanSpeed(SetDeviceFanSpeed other) : this()
    {
        deviceId_ = other.deviceId_;
        fanSpeed_ = other.fanSpeed_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeviceFanSpeed Clone()
    {
        return new SetDeviceFanSpeed(this);
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 1;
    private string deviceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId
    {
        get { return deviceId_; }
        set
        {
            deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "fan_speed" field.</summary>
    public const int FanSpeedFieldNumber = 2;
    private int fanSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FanSpeed
    {
        get { return fanSpeed_; }
        set
        {
            fanSpeed_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as SetDeviceFanSpeed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetDeviceFanSpeed other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (DeviceId != other.DeviceId) return false;
        if (FanSpeed != other.FanSpeed) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
        if (FanSpeed != 0) hash ^= FanSpeed.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (DeviceId.Length != 0)
        {
            output.WriteRawTag(10);
            output.WriteString(DeviceId);
        }
        if (FanSpeed != 0)
        {
            output.WriteRawTag(16);
            output.WriteInt32(FanSpeed);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (DeviceId.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
        }
        if (FanSpeed != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(FanSpeed);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetDeviceFanSpeed other)
    {
        if (other == null)
        {
            return;
        }
        if (other.DeviceId.Length != 0)
        {
            DeviceId = other.DeviceId;
        }
        if (other.FanSpeed != 0)
        {
            FanSpeed = other.FanSpeed;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        DeviceId = input.ReadString();
                        break;
                    }
                case 16:
                    {
                        FanSpeed = input.ReadInt32();
                        break;
                    }
            }
        }
    }

}

public sealed partial class MinerAlgorithmPair : pb::IMessage<MinerAlgorithmPair>
{
    private static readonly pb::MessageParser<MinerAlgorithmPair> _parser = new pb::MessageParser<MinerAlgorithmPair>(() => new MinerAlgorithmPair());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MinerAlgorithmPair> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::NhmsReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MinerAlgorithmPair()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MinerAlgorithmPair(MinerAlgorithmPair other) : this()
    {
        algorithmIds_ = other.algorithmIds_.Clone();
        algorithmName_ = other.algorithmName_;
        minerId_ = other.minerId_;
        minerName_ = other.minerName_;
        enabled_ = other.enabled_;
        benchmarkedSpeeds_ = other.benchmarkedSpeeds_.Clone();
        activeMiningSpeeds_ = other.activeMiningSpeeds_.Clone();
        powerConsumption_ = other.powerConsumption_;
        extraLaunchParameters_ = other.extraLaunchParameters_;
        status_ = other.status_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MinerAlgorithmPair Clone()
    {
        return new MinerAlgorithmPair(this);
    }

    /// <summary>Field number for the "algorithm_ids" field.</summary>
    public const int AlgorithmIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_algorithmIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> algorithmIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> AlgorithmIds
    {
        get { return algorithmIds_; }
    }

    /// <summary>Field number for the "algorithm_name" field.</summary>
    public const int AlgorithmNameFieldNumber = 2;
    private string algorithmName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AlgorithmName
    {
        get { return algorithmName_; }
        set
        {
            algorithmName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "miner_id" field.</summary>
    public const int MinerIdFieldNumber = 3;
    private string minerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MinerId
    {
        get { return minerId_; }
        set
        {
            minerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "miner_name" field.</summary>
    public const int MinerNameFieldNumber = 4;
    private string minerName_ = "";
    /// <summary>
    /// immutable data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MinerName
    {
        get { return minerName_; }
        set
        {
            minerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 5;
    private bool enabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled
    {
        get { return enabled_; }
        set
        {
            enabled_ = value;
        }
    }

    /// <summary>Field number for the "benchmarked_speeds" field.</summary>
    public const int BenchmarkedSpeedsFieldNumber = 6;
    private static readonly pb::FieldCodec<double> _repeated_benchmarkedSpeeds_codec
        = pb::FieldCodec.ForDouble(50);
    private readonly pbc::RepeatedField<double> benchmarkedSpeeds_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// put variable info here or separate to new struct/message
    /// benchmarked speeds depend on multiple factors. Miner version, miner-algorithm EXTRA LAUNCH PARAMETERS, gpu driver version, device tdp and clock settings, miner job (proxy should fix this)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> BenchmarkedSpeeds
    {
        get { return benchmarkedSpeeds_; }
    }

    /// <summary>Field number for the "active_mining_speeds" field.</summary>
    public const int ActiveMiningSpeedsFieldNumber = 7;
    private static readonly pb::FieldCodec<double> _repeated_activeMiningSpeeds_codec
        = pb::FieldCodec.ForDouble(58);
    private readonly pbc::RepeatedField<double> activeMiningSpeeds_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// immutable data. NON 0 when mining (if user want's to compare and change benchmarked_speeds @matjaz)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> ActiveMiningSpeeds
    {
        get { return activeMiningSpeeds_; }
    }

    /// <summary>Field number for the "power_consumption" field.</summary>
    public const int PowerConsumptionFieldNumber = 8;
    private int powerConsumption_;
    /// <summary>
    /// check NVML ADL power usage unit W or Wh. Last active value. Negative indicates missing.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PowerConsumption
    {
        get { return powerConsumption_; }
        set
        {
            powerConsumption_ = value;
        }
    }

    /// <summary>Field number for the "extra_launch_parameters" field.</summary>
    public const int ExtraLaunchParametersFieldNumber = 9;
    private string extraLaunchParameters_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExtraLaunchParameters
    {
        get { return extraLaunchParameters_; }
        set
        {
            extraLaunchParameters_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 10;
    private global::MinerAlgorithmPair.Types.Status status_ = global::MinerAlgorithmPair.Types.Status.NotSetInvalid;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MinerAlgorithmPair.Types.Status Status
    {
        get { return status_; }
        set
        {
            status_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as MinerAlgorithmPair);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MinerAlgorithmPair other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (!algorithmIds_.Equals(other.algorithmIds_)) return false;
        if (AlgorithmName != other.AlgorithmName) return false;
        if (MinerId != other.MinerId) return false;
        if (MinerName != other.MinerName) return false;
        if (Enabled != other.Enabled) return false;
        if (!benchmarkedSpeeds_.Equals(other.benchmarkedSpeeds_)) return false;
        if (!activeMiningSpeeds_.Equals(other.activeMiningSpeeds_)) return false;
        if (PowerConsumption != other.PowerConsumption) return false;
        if (ExtraLaunchParameters != other.ExtraLaunchParameters) return false;
        if (Status != other.Status) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        hash ^= algorithmIds_.GetHashCode();
        if (AlgorithmName.Length != 0) hash ^= AlgorithmName.GetHashCode();
        if (MinerId.Length != 0) hash ^= MinerId.GetHashCode();
        if (MinerName.Length != 0) hash ^= MinerName.GetHashCode();
        if (Enabled != false) hash ^= Enabled.GetHashCode();
        hash ^= benchmarkedSpeeds_.GetHashCode();
        hash ^= activeMiningSpeeds_.GetHashCode();
        if (PowerConsumption != 0) hash ^= PowerConsumption.GetHashCode();
        if (ExtraLaunchParameters.Length != 0) hash ^= ExtraLaunchParameters.GetHashCode();
        if (Status != global::MinerAlgorithmPair.Types.Status.NotSetInvalid) hash ^= Status.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        algorithmIds_.WriteTo(output, _repeated_algorithmIds_codec);
        if (AlgorithmName.Length != 0)
        {
            output.WriteRawTag(18);
            output.WriteString(AlgorithmName);
        }
        if (MinerId.Length != 0)
        {
            output.WriteRawTag(26);
            output.WriteString(MinerId);
        }
        if (MinerName.Length != 0)
        {
            output.WriteRawTag(34);
            output.WriteString(MinerName);
        }
        if (Enabled != false)
        {
            output.WriteRawTag(40);
            output.WriteBool(Enabled);
        }
        benchmarkedSpeeds_.WriteTo(output, _repeated_benchmarkedSpeeds_codec);
        activeMiningSpeeds_.WriteTo(output, _repeated_activeMiningSpeeds_codec);
        if (PowerConsumption != 0)
        {
            output.WriteRawTag(64);
            output.WriteInt32(PowerConsumption);
        }
        if (ExtraLaunchParameters.Length != 0)
        {
            output.WriteRawTag(74);
            output.WriteString(ExtraLaunchParameters);
        }
        if (Status != global::MinerAlgorithmPair.Types.Status.NotSetInvalid)
        {
            output.WriteRawTag(80);
            output.WriteEnum((int)Status);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        size += algorithmIds_.CalculateSize(_repeated_algorithmIds_codec);
        if (AlgorithmName.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AlgorithmName);
        }
        if (MinerId.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(MinerId);
        }
        if (MinerName.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(MinerName);
        }
        if (Enabled != false)
        {
            size += 1 + 1;
        }
        size += benchmarkedSpeeds_.CalculateSize(_repeated_benchmarkedSpeeds_codec);
        size += activeMiningSpeeds_.CalculateSize(_repeated_activeMiningSpeeds_codec);
        if (PowerConsumption != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PowerConsumption);
        }
        if (ExtraLaunchParameters.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ExtraLaunchParameters);
        }
        if (Status != global::MinerAlgorithmPair.Types.Status.NotSetInvalid)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Status);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MinerAlgorithmPair other)
    {
        if (other == null)
        {
            return;
        }
        algorithmIds_.Add(other.algorithmIds_);
        if (other.AlgorithmName.Length != 0)
        {
            AlgorithmName = other.AlgorithmName;
        }
        if (other.MinerId.Length != 0)
        {
            MinerId = other.MinerId;
        }
        if (other.MinerName.Length != 0)
        {
            MinerName = other.MinerName;
        }
        if (other.Enabled != false)
        {
            Enabled = other.Enabled;
        }
        benchmarkedSpeeds_.Add(other.benchmarkedSpeeds_);
        activeMiningSpeeds_.Add(other.activeMiningSpeeds_);
        if (other.PowerConsumption != 0)
        {
            PowerConsumption = other.PowerConsumption;
        }
        if (other.ExtraLaunchParameters.Length != 0)
        {
            ExtraLaunchParameters = other.ExtraLaunchParameters;
        }
        if (other.Status != global::MinerAlgorithmPair.Types.Status.NotSetInvalid)
        {
            Status = other.Status;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                case 8:
                    {
                        algorithmIds_.AddEntriesFrom(input, _repeated_algorithmIds_codec);
                        break;
                    }
                case 18:
                    {
                        AlgorithmName = input.ReadString();
                        break;
                    }
                case 26:
                    {
                        MinerId = input.ReadString();
                        break;
                    }
                case 34:
                    {
                        MinerName = input.ReadString();
                        break;
                    }
                case 40:
                    {
                        Enabled = input.ReadBool();
                        break;
                    }
                case 50:
                case 49:
                    {
                        benchmarkedSpeeds_.AddEntriesFrom(input, _repeated_benchmarkedSpeeds_codec);
                        break;
                    }
                case 58:
                case 57:
                    {
                        activeMiningSpeeds_.AddEntriesFrom(input, _repeated_activeMiningSpeeds_codec);
                        break;
                    }
                case 64:
                    {
                        PowerConsumption = input.ReadInt32();
                        break;
                    }
                case 74:
                    {
                        ExtraLaunchParameters = input.ReadString();
                        break;
                    }
                case 80:
                    {
                        Status = (global::MinerAlgorithmPair.Types.Status)input.ReadEnum();
                        break;
                    }
            }
        }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MinerAlgorithmPair message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types
    {
        public enum Status
        {
            [pbr::OriginalName("STATUS_NOT_SET_INVALID")] NotSetInvalid = 0,
            [pbr::OriginalName("DISABLED")] Disabled = 1,
            [pbr::OriginalName("NO_BENCHMARK")] NoBenchmark = 2,
            [pbr::OriginalName("BENCHMARKED")] Benchmarked = 3,
            [pbr::OriginalName("RE_BENCHMARK")] ReBenchmark = 4,
            [pbr::OriginalName("BENCHMARK_PENDING")] BenchmarkPending = 5,
            [pbr::OriginalName("BENCHMARKING")] Benchmarking = 6,
            [pbr::OriginalName("MINING")] Mining = 7,
            [pbr::OriginalName("ERROR")] Error = 8,
        }

    }
    #endregion

}

public sealed partial class DeviceAlgorithmsInfo : pb::IMessage<DeviceAlgorithmsInfo>
{
    private static readonly pb::MessageParser<DeviceAlgorithmsInfo> _parser = new pb::MessageParser<DeviceAlgorithmsInfo>(() => new DeviceAlgorithmsInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceAlgorithmsInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::NhmsReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceAlgorithmsInfo()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceAlgorithmsInfo(DeviceAlgorithmsInfo other) : this()
    {
        deviceId_ = other.deviceId_;
        miningAlgorithm_ = other.miningAlgorithm_ != null ? other.miningAlgorithm_.Clone() : null;
        algorithms_ = other.algorithms_.Clone();
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceAlgorithmsInfo Clone()
    {
        return new DeviceAlgorithmsInfo(this);
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 1;
    private string deviceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId
    {
        get { return deviceId_; }
        set
        {
            deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "mining_algorithm" field.</summary>
    public const int MiningAlgorithmFieldNumber = 2;
    private global::MinerAlgorithmPair miningAlgorithm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MinerAlgorithmPair MiningAlgorithm
    {
        get { return miningAlgorithm_; }
        set
        {
            miningAlgorithm_ = value;
        }
    }

    /// <summary>Field number for the "algorithms" field.</summary>
    public const int AlgorithmsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::MinerAlgorithmPair> _repeated_algorithms_codec
        = pb::FieldCodec.ForMessage(26, global::MinerAlgorithmPair.Parser);
    private readonly pbc::RepeatedField<global::MinerAlgorithmPair> algorithms_ = new pbc::RepeatedField<global::MinerAlgorithmPair>();
    /// <summary>
    /// algorithms only enabled. PROBLEM!!! If I disable the algorithm how do I re/enable it?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MinerAlgorithmPair> Algorithms
    {
        get { return algorithms_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as DeviceAlgorithmsInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceAlgorithmsInfo other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (DeviceId != other.DeviceId) return false;
        if (!object.Equals(MiningAlgorithm, other.MiningAlgorithm)) return false;
        if (!algorithms_.Equals(other.algorithms_)) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
        if (miningAlgorithm_ != null) hash ^= MiningAlgorithm.GetHashCode();
        hash ^= algorithms_.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (DeviceId.Length != 0)
        {
            output.WriteRawTag(10);
            output.WriteString(DeviceId);
        }
        if (miningAlgorithm_ != null)
        {
            output.WriteRawTag(18);
            output.WriteMessage(MiningAlgorithm);
        }
        algorithms_.WriteTo(output, _repeated_algorithms_codec);
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (DeviceId.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
        }
        if (miningAlgorithm_ != null)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(MiningAlgorithm);
        }
        size += algorithms_.CalculateSize(_repeated_algorithms_codec);
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceAlgorithmsInfo other)
    {
        if (other == null)
        {
            return;
        }
        if (other.DeviceId.Length != 0)
        {
            DeviceId = other.DeviceId;
        }
        if (other.miningAlgorithm_ != null)
        {
            if (miningAlgorithm_ == null)
            {
                MiningAlgorithm = new global::MinerAlgorithmPair();
            }
            MiningAlgorithm.MergeFrom(other.MiningAlgorithm);
        }
        algorithms_.Add(other.algorithms_);
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        DeviceId = input.ReadString();
                        break;
                    }
                case 18:
                    {
                        if (miningAlgorithm_ == null)
                        {
                            MiningAlgorithm = new global::MinerAlgorithmPair();
                        }
                        input.ReadMessage(MiningAlgorithm);
                        break;
                    }
                case 26:
                    {
                        algorithms_.AddEntriesFrom(input, _repeated_algorithms_codec);
                        break;
                    }
            }
        }
    }

}

public sealed partial class DevicesAlgorithms : pb::IMessage<DevicesAlgorithms>
{
    private static readonly pb::MessageParser<DevicesAlgorithms> _parser = new pb::MessageParser<DevicesAlgorithms>(() => new DevicesAlgorithms());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DevicesAlgorithms> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::NhmsReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DevicesAlgorithms()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DevicesAlgorithms(DevicesAlgorithms other) : this()
    {
        enabledDevices_ = other.enabledDevices_.Clone();
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DevicesAlgorithms Clone()
    {
        return new DevicesAlgorithms(this);
    }

    /// <summary>Field number for the "enabled_devices" field.</summary>
    public const int EnabledDevicesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::DeviceAlgorithmsInfo> _repeated_enabledDevices_codec
        = pb::FieldCodec.ForMessage(10, global::DeviceAlgorithmsInfo.Parser);
    private readonly pbc::RepeatedField<global::DeviceAlgorithmsInfo> enabledDevices_ = new pbc::RepeatedField<global::DeviceAlgorithmsInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DeviceAlgorithmsInfo> EnabledDevices
    {
        get { return enabledDevices_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as DevicesAlgorithms);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DevicesAlgorithms other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (!enabledDevices_.Equals(other.enabledDevices_)) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        hash ^= enabledDevices_.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        enabledDevices_.WriteTo(output, _repeated_enabledDevices_codec);
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        size += enabledDevices_.CalculateSize(_repeated_enabledDevices_codec);
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DevicesAlgorithms other)
    {
        if (other == null)
        {
            return;
        }
        enabledDevices_.Add(other.enabledDevices_);
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        enabledDevices_.AddEntriesFrom(input, _repeated_enabledDevices_codec);
                        break;
                    }
            }
        }
    }

}

public sealed partial class UpdateDeviceMiningState : pb::IMessage<UpdateDeviceMiningState>
{
    private static readonly pb::MessageParser<UpdateDeviceMiningState> _parser = new pb::MessageParser<UpdateDeviceMiningState>(() => new UpdateDeviceMiningState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateDeviceMiningState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::NhmsReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDeviceMiningState()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDeviceMiningState(UpdateDeviceMiningState other) : this()
    {
        deviceId_ = other.deviceId_;
        algorithmIds_ = other.algorithmIds_.Clone();
        minerId_ = other.minerId_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDeviceMiningState Clone()
    {
        return new UpdateDeviceMiningState(this);
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 1;
    private string deviceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId
    {
        get { return deviceId_; }
        set
        {
            deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "algorithm_ids" field.</summary>
    public const int AlgorithmIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_algorithmIds_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> algorithmIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> AlgorithmIds
    {
        get { return algorithmIds_; }
    }

    /// <summary>Field number for the "miner_id" field.</summary>
    public const int MinerIdFieldNumber = 3;
    private string minerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MinerId
    {
        get { return minerId_; }
        set
        {
            minerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as UpdateDeviceMiningState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateDeviceMiningState other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (DeviceId != other.DeviceId) return false;
        if (!algorithmIds_.Equals(other.algorithmIds_)) return false;
        if (MinerId != other.MinerId) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
        hash ^= algorithmIds_.GetHashCode();
        if (MinerId.Length != 0) hash ^= MinerId.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (DeviceId.Length != 0)
        {
            output.WriteRawTag(10);
            output.WriteString(DeviceId);
        }
        algorithmIds_.WriteTo(output, _repeated_algorithmIds_codec);
        if (MinerId.Length != 0)
        {
            output.WriteRawTag(26);
            output.WriteString(MinerId);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (DeviceId.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
        }
        size += algorithmIds_.CalculateSize(_repeated_algorithmIds_codec);
        if (MinerId.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(MinerId);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateDeviceMiningState other)
    {
        if (other == null)
        {
            return;
        }
        if (other.DeviceId.Length != 0)
        {
            DeviceId = other.DeviceId;
        }
        algorithmIds_.Add(other.algorithmIds_);
        if (other.MinerId.Length != 0)
        {
            MinerId = other.MinerId;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        DeviceId = input.ReadString();
                        break;
                    }
                case 18:
                case 16:
                    {
                        algorithmIds_.AddEntriesFrom(input, _repeated_algorithmIds_codec);
                        break;
                    }
                case 26:
                    {
                        MinerId = input.ReadString();
                        break;
                    }
            }
        }
    }

}

public sealed partial class SetDeviceEnabledState : pb::IMessage<SetDeviceEnabledState>
{
    private static readonly pb::MessageParser<SetDeviceEnabledState> _parser = new pb::MessageParser<SetDeviceEnabledState>(() => new SetDeviceEnabledState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetDeviceEnabledState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::NhmsReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeviceEnabledState()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeviceEnabledState(SetDeviceEnabledState other) : this()
    {
        deviceId_ = other.deviceId_;
        enabled_ = other.enabled_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeviceEnabledState Clone()
    {
        return new SetDeviceEnabledState(this);
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 1;
    private string deviceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId
    {
        get { return deviceId_; }
        set
        {
            deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 2;
    private bool enabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled
    {
        get { return enabled_; }
        set
        {
            enabled_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as SetDeviceEnabledState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetDeviceEnabledState other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (DeviceId != other.DeviceId) return false;
        if (Enabled != other.Enabled) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
        if (Enabled != false) hash ^= Enabled.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (DeviceId.Length != 0)
        {
            output.WriteRawTag(10);
            output.WriteString(DeviceId);
        }
        if (Enabled != false)
        {
            output.WriteRawTag(16);
            output.WriteBool(Enabled);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (DeviceId.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
        }
        if (Enabled != false)
        {
            size += 1 + 1;
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetDeviceEnabledState other)
    {
        if (other == null)
        {
            return;
        }
        if (other.DeviceId.Length != 0)
        {
            DeviceId = other.DeviceId;
        }
        if (other.Enabled != false)
        {
            Enabled = other.Enabled;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        DeviceId = input.ReadString();
                        break;
                    }
                case 16:
                    {
                        Enabled = input.ReadBool();
                        break;
                    }
            }
        }
    }

}

public sealed partial class SetDeviceMinerAlgorithmPairEnabledState : pb::IMessage<SetDeviceMinerAlgorithmPairEnabledState>
{
    private static readonly pb::MessageParser<SetDeviceMinerAlgorithmPairEnabledState> _parser = new pb::MessageParser<SetDeviceMinerAlgorithmPairEnabledState>(() => new SetDeviceMinerAlgorithmPairEnabledState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetDeviceMinerAlgorithmPairEnabledState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::NhmsReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeviceMinerAlgorithmPairEnabledState()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeviceMinerAlgorithmPairEnabledState(SetDeviceMinerAlgorithmPairEnabledState other) : this()
    {
        deviceId_ = other.deviceId_;
        algorithmIds_ = other.algorithmIds_.Clone();
        minerId_ = other.minerId_;
        enabled_ = other.enabled_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeviceMinerAlgorithmPairEnabledState Clone()
    {
        return new SetDeviceMinerAlgorithmPairEnabledState(this);
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 1;
    private string deviceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId
    {
        get { return deviceId_; }
        set
        {
            deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "algorithm_ids" field.</summary>
    public const int AlgorithmIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_algorithmIds_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> algorithmIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> AlgorithmIds
    {
        get { return algorithmIds_; }
    }

    /// <summary>Field number for the "miner_id" field.</summary>
    public const int MinerIdFieldNumber = 3;
    private string minerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MinerId
    {
        get { return minerId_; }
        set
        {
            minerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 4;
    private bool enabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled
    {
        get { return enabled_; }
        set
        {
            enabled_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as SetDeviceMinerAlgorithmPairEnabledState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetDeviceMinerAlgorithmPairEnabledState other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (DeviceId != other.DeviceId) return false;
        if (!algorithmIds_.Equals(other.algorithmIds_)) return false;
        if (MinerId != other.MinerId) return false;
        if (Enabled != other.Enabled) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
        hash ^= algorithmIds_.GetHashCode();
        if (MinerId.Length != 0) hash ^= MinerId.GetHashCode();
        if (Enabled != false) hash ^= Enabled.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (DeviceId.Length != 0)
        {
            output.WriteRawTag(10);
            output.WriteString(DeviceId);
        }
        algorithmIds_.WriteTo(output, _repeated_algorithmIds_codec);
        if (MinerId.Length != 0)
        {
            output.WriteRawTag(26);
            output.WriteString(MinerId);
        }
        if (Enabled != false)
        {
            output.WriteRawTag(32);
            output.WriteBool(Enabled);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (DeviceId.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
        }
        size += algorithmIds_.CalculateSize(_repeated_algorithmIds_codec);
        if (MinerId.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(MinerId);
        }
        if (Enabled != false)
        {
            size += 1 + 1;
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetDeviceMinerAlgorithmPairEnabledState other)
    {
        if (other == null)
        {
            return;
        }
        if (other.DeviceId.Length != 0)
        {
            DeviceId = other.DeviceId;
        }
        algorithmIds_.Add(other.algorithmIds_);
        if (other.MinerId.Length != 0)
        {
            MinerId = other.MinerId;
        }
        if (other.Enabled != false)
        {
            Enabled = other.Enabled;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        DeviceId = input.ReadString();
                        break;
                    }
                case 18:
                case 16:
                    {
                        algorithmIds_.AddEntriesFrom(input, _repeated_algorithmIds_codec);
                        break;
                    }
                case 26:
                    {
                        MinerId = input.ReadString();
                        break;
                    }
                case 32:
                    {
                        Enabled = input.ReadBool();
                        break;
                    }
            }
        }
    }

}

#endregion


#endregion Designer generated code
