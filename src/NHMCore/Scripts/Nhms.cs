// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: nhms.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from nhms.proto</summary>
public static partial class NhmsReflection
{

    #region Descriptor
    /// <summary>File descriptor for nhms.proto</summary>
    public static pbr::FileDescriptor Descriptor
    {
        get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NhmsReflection()
    {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            string.Concat(
              "CgpuaG1zLnByb3RvIh4KDkluQ29uc29sZVByaW50EgwKBHdoYXQYASABKAki",
              "CQoHT3V0Vm9pZCI5CghTbWFFbnRyeRIKCgJpZBgBIAEoBRIOCgZwYXlpbmcY",
              "AiABKAESEQoJaXNfc3RhYmxlGAMgASgIIiUKB1NNQUluZm8SGgoHZW50cmll",
              "cxgBIAMoCzIJLlNtYUVudHJ5IjIKD0RldmljZVNldFJlc3VsdBIOCgZzdGF0",
              "dXMYASABKAUSDwoHbWVzc2FnZRgCIAEoCSL9AQoVSW5PdXREZXZpY2VTdGF0",
              "dXNJbmZvEhEKCWRldmljZV9pZBgBIAEoCRIPCgdlbmFibGVkGAIgASgIEi0K",
              "BnN0YXR1cxgDIAEoDjIdLkluT3V0RGV2aWNlU3RhdHVzSW5mby5TdGF0dXMS",
              "EwoLdGVtcGVyYXR1cmUYBCABKAESDAoEbG9hZBgFIAEoASJuCgZTdGF0dXMS",
              "EwoPTk9UX1NFVF9JTlZBTElEEAASCwoHUEVORElORxABEgsKB1NUT1BQRUQQ",
              "AhIKCgZNSU5JTkcQAxIQCgxCRU5DSE1BUktJTkcQBBIJCgVFUlJPUhAFEgwK",
              "CERJU0FCTEVEEAYibAoWSW5PdXREZXZpY2VGYW5TcGVlZFJQTRIRCglkZXZp",
              "Y2VfaWQYASABKAkSEQoJZmFuX3NwZWVkGAIgASgFEhUKDW1pbl9mYW5fc3Bl",
              "ZWQYAyABKAUSFQoNbWF4X2Zhbl9zcGVlZBgEIAEoBSKcAgoNT3V0RGV2aWNl",
              "SW5mbxIRCglkZXZpY2VfaWQYASABKAkSDAoEbmFtZRgCIAEoCRIhCgR0eXBl",
              "GAMgASgOMhMuT3V0RGV2aWNlSW5mby5UeXBlEiUKBnZlbmRvchgEIAEoDjIV",
              "Lk91dERldmljZUluZm8uVmVuZG9yEisKC3N0YXR1c19pbmZvGAUgASgLMhYu",
              "SW5PdXREZXZpY2VTdGF0dXNJbmZvEi8KDmZhbl9zcGVlZF9pbmZvGAYgASgL",
              "MhcuSW5PdXREZXZpY2VGYW5TcGVlZFJQTSIYCgRUeXBlEgcKA0NQVRAAEgcK",
              "A0dQVRABIigKBlZlbmRvchIHCgNBTUQQABIKCgZOVklESUEQARIJCgVJTlRF",
              "TBACIjEKDk91dERldmljZXNJbmZvEh8KB2RldmljZXMYASADKAsyDi5PdXRE",
              "ZXZpY2VJbmZvIiQKD0luR2V0RGV2aWNlSW5mbxIRCglkZXZpY2VfaWQYASAB",
              "KAkiWQoWT3V0R2V0RGV2aWNlSW5mb1Jlc3VsdBIOCgZzdGF0dXMYASABKAUS",
              "DwoHbWVzc2FnZRgCIAEoCRIeCgZyZXN1bHQYAyABKAsyDi5PdXREZXZpY2VJ",
              "bmZvIt8BChJNaW5lckFsZ29yaXRobVBhaXISFQoNYWxnb3JpdGhtX2lkcxgB",
              "IAMoBRIWCg5hbGdvcml0aG1fbmFtZRgCIAEoCRIQCghtaW5lcl9pZBgDIAEo",
              "CRISCgptaW5lcl9uYW1lGAQgASgJEhoKEmJlbmNobWFya2VkX3NwZWVkcxgF",
              "IAMoARIcChRhY3RpdmVfbWluaW5nX3NwZWVkcxgGIAMoARIZChFwb3dlcl9j",
              "b25zdW1wdGlvbhgHIAEoBRIfChdleHRyYV9sYXVuY2hfcGFyYW1ldGVycxgI",
              "IAEoCSKBAQoURGV2aWNlQWxnb3JpdGhtc0luZm8SEQoJZGV2aWNlX2lkGAEg",
              "ASgJEi0KEGFjdGl2ZV9hbGdvcml0aG0YAiABKAsyEy5NaW5lckFsZ29yaXRo",
              "bVBhaXISJwoKYWxnb3JpdGhtcxgDIAMoCzITLk1pbmVyQWxnb3JpdGhtUGFp",
              "ciI7ChFEZXZpY2VzQWxnb3JpdGhtcxImCgdkZXZpY2VzGAEgAygLMhUuRGV2",
              "aWNlQWxnb3JpdGhtc0luZm8iVQoXVXBkYXRlRGV2aWNlTWluaW5nU3RhdGUS",
              "EQoJZGV2aWNlX2lkGAEgASgJEhUKDWFsZ29yaXRobV9pZHMYAiADKAUSEAoI",
              "bWluZXJfaWQYAyABKAkiOwoVU2V0RGV2aWNlRW5hYmxlZFN0YXRlEhEKCWRl",
              "dmljZV9pZBgBIAEoCRIPCgdlbmFibGVkGAIgASgIIiAKC1N0YXJ0RGV2aWNl",
              "EhEKCWRldmljZV9pZBgBIAEoCSIfCgpTdG9wRGV2aWNlEhEKCWRldmljZV9p",
              "ZBgBIAEoCSJ2CidTZXREZXZpY2VNaW5lckFsZ29yaXRobVBhaXJFbmFibGVk",
              "U3RhdGUSEQoJZGV2aWNlX2lkGAEgASgJEhUKDWFsZ29yaXRobV9pZHMYAiAD",
              "KAUSEAoIbWluZXJfaWQYAyABKAkSDwoHZW5hYmxlZBgEIAEoCGIGcHJvdG8z"));
        descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
            new pbr::FileDescriptor[] { },
            new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::InConsolePrint), global::InConsolePrint.Parser, new[]{ "What" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::OutVoid), global::OutVoid.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SmaEntry), global::SmaEntry.Parser, new[]{ "Id", "Paying", "IsStable" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SMAInfo), global::SMAInfo.Parser, new[]{ "Entries" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DeviceSetResult), global::DeviceSetResult.Parser, new[]{ "Status", "Message" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::InOutDeviceStatusInfo), global::InOutDeviceStatusInfo.Parser, new[]{ "DeviceId", "Enabled", "Status", "Temperature", "Load" }, null, new[]{ typeof(global::InOutDeviceStatusInfo.Types.Status) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::InOutDeviceFanSpeedRPM), global::InOutDeviceFanSpeedRPM.Parser, new[]{ "DeviceId", "FanSpeed", "MinFanSpeed", "MaxFanSpeed" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::OutDeviceInfo), global::OutDeviceInfo.Parser, new[]{ "DeviceId", "Name", "Type", "Vendor", "StatusInfo", "FanSpeedInfo" }, null, new[]{ typeof(global::OutDeviceInfo.Types.Type), typeof(global::OutDeviceInfo.Types.Vendor) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::OutDevicesInfo), global::OutDevicesInfo.Parser, new[]{ "Devices" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::InGetDeviceInfo), global::InGetDeviceInfo.Parser, new[]{ "DeviceId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::OutGetDeviceInfoResult), global::OutGetDeviceInfoResult.Parser, new[]{ "Status", "Message", "Result" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MinerAlgorithmPair), global::MinerAlgorithmPair.Parser, new[]{ "AlgorithmIds", "AlgorithmName", "MinerId", "MinerName", "BenchmarkedSpeeds", "ActiveMiningSpeeds", "PowerConsumption", "ExtraLaunchParameters" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DeviceAlgorithmsInfo), global::DeviceAlgorithmsInfo.Parser, new[]{ "DeviceId", "ActiveAlgorithm", "Algorithms" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DevicesAlgorithms), global::DevicesAlgorithms.Parser, new[]{ "Devices" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UpdateDeviceMiningState), global::UpdateDeviceMiningState.Parser, new[]{ "DeviceId", "AlgorithmIds", "MinerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SetDeviceEnabledState), global::SetDeviceEnabledState.Parser, new[]{ "DeviceId", "Enabled" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::StartDevice), global::StartDevice.Parser, new[]{ "DeviceId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::StopDevice), global::StopDevice.Parser, new[]{ "DeviceId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SetDeviceMinerAlgorithmPairEnabledState), global::SetDeviceMinerAlgorithmPairEnabledState.Parser, new[]{ "DeviceId", "AlgorithmIds", "MinerId", "Enabled" }, null, null, null, null)
            }));
    }
    #endregion

}
#region Messages
public sealed partial class InConsolePrint : pb::IMessage<InConsolePrint>
{
    private static readonly pb::MessageParser<InConsolePrint> _parser = new pb::MessageParser<InConsolePrint>(() => new InConsolePrint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InConsolePrint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::NhmsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InConsolePrint()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InConsolePrint(InConsolePrint other) : this()
    {
        what_ = other.what_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InConsolePrint Clone()
    {
        return new InConsolePrint(this);
    }

    /// <summary>Field number for the "what" field.</summary>
    public const int WhatFieldNumber = 1;
    private string what_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string What
    {
        get { return what_; }
        set
        {
            what_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as InConsolePrint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InConsolePrint other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (What != other.What) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (What.Length != 0) hash ^= What.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (What.Length != 0)
        {
            output.WriteRawTag(10);
            output.WriteString(What);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (What.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(What);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InConsolePrint other)
    {
        if (other == null)
        {
            return;
        }
        if (other.What.Length != 0)
        {
            What = other.What;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        What = input.ReadString();
                        break;
                    }
            }
        }
    }

}

/// <summary>
/// VOID message
/// </summary>
public sealed partial class OutVoid : pb::IMessage<OutVoid>
{
    private static readonly pb::MessageParser<OutVoid> _parser = new pb::MessageParser<OutVoid>(() => new OutVoid());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OutVoid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::NhmsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutVoid()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutVoid(OutVoid other) : this()
    {
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutVoid Clone()
    {
        return new OutVoid(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as OutVoid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OutVoid other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OutVoid other)
    {
        if (other == null)
        {
            return;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
            }
        }
    }

}

/// <summary>
/// GETTER
/// </summary>
public sealed partial class SmaEntry : pb::IMessage<SmaEntry>
{
    private static readonly pb::MessageParser<SmaEntry> _parser = new pb::MessageParser<SmaEntry>(() => new SmaEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SmaEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::NhmsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmaEntry()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmaEntry(SmaEntry other) : this()
    {
        id_ = other.id_;
        paying_ = other.paying_;
        isStable_ = other.isStable_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmaEntry Clone()
    {
        return new SmaEntry(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id
    {
        get { return id_; }
        set
        {
            id_ = value;
        }
    }

    /// <summary>Field number for the "paying" field.</summary>
    public const int PayingFieldNumber = 2;
    private double paying_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Paying
    {
        get { return paying_; }
        set
        {
            paying_ = value;
        }
    }

    /// <summary>Field number for the "is_stable" field.</summary>
    public const int IsStableFieldNumber = 3;
    private bool isStable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStable
    {
        get { return isStable_; }
        set
        {
            isStable_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as SmaEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SmaEntry other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Id != other.Id) return false;
        if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Paying, other.Paying)) return false;
        if (IsStable != other.IsStable) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Id != 0) hash ^= Id.GetHashCode();
        if (Paying != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Paying);
        if (IsStable != false) hash ^= IsStable.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Id != 0)
        {
            output.WriteRawTag(8);
            output.WriteInt32(Id);
        }
        if (Paying != 0D)
        {
            output.WriteRawTag(17);
            output.WriteDouble(Paying);
        }
        if (IsStable != false)
        {
            output.WriteRawTag(24);
            output.WriteBool(IsStable);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Id != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
        }
        if (Paying != 0D)
        {
            size += 1 + 8;
        }
        if (IsStable != false)
        {
            size += 1 + 1;
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SmaEntry other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Id != 0)
        {
            Id = other.Id;
        }
        if (other.Paying != 0D)
        {
            Paying = other.Paying;
        }
        if (other.IsStable != false)
        {
            IsStable = other.IsStable;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        Id = input.ReadInt32();
                        break;
                    }
                case 17:
                    {
                        Paying = input.ReadDouble();
                        break;
                    }
                case 24:
                    {
                        IsStable = input.ReadBool();
                        break;
                    }
            }
        }
    }

}

/// <summary>
/// GETTER
/// </summary>
public sealed partial class SMAInfo : pb::IMessage<SMAInfo>
{
    private static readonly pb::MessageParser<SMAInfo> _parser = new pb::MessageParser<SMAInfo>(() => new SMAInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SMAInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::NhmsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SMAInfo()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SMAInfo(SMAInfo other) : this()
    {
        entries_ = other.entries_.Clone();
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SMAInfo Clone()
    {
        return new SMAInfo(this);
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SmaEntry> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(10, global::SmaEntry.Parser);
    private readonly pbc::RepeatedField<global::SmaEntry> entries_ = new pbc::RepeatedField<global::SmaEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SmaEntry> Entries
    {
        get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as SMAInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SMAInfo other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (!entries_.Equals(other.entries_)) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        hash ^= entries_.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        entries_.WriteTo(output, _repeated_entries_codec);
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        size += entries_.CalculateSize(_repeated_entries_codec);
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SMAInfo other)
    {
        if (other == null)
        {
            return;
        }
        entries_.Add(other.entries_);
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        entries_.AddEntriesFrom(input, _repeated_entries_codec);
                        break;
                    }
            }
        }
    }

}

/// <summary>
/// GETTER
/// this should be used for all device set functions
/// </summary>
public sealed partial class DeviceSetResult : pb::IMessage<DeviceSetResult>
{
    private static readonly pb::MessageParser<DeviceSetResult> _parser = new pb::MessageParser<DeviceSetResult>(() => new DeviceSetResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceSetResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::NhmsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceSetResult()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceSetResult(DeviceSetResult other) : this()
    {
        status_ = other.status_;
        message_ = other.message_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceSetResult Clone()
    {
        return new DeviceSetResult(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    /// immutable getter 0 is ok other is ERROR
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status
    {
        get { return status_; }
        set
        {
            status_ = value;
        }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    /// <summary>
    /// immutable getter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message
    {
        get { return message_; }
        set
        {
            message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as DeviceSetResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceSetResult other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Status != other.Status) return false;
        if (Message != other.Message) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Status != 0) hash ^= Status.GetHashCode();
        if (Message.Length != 0) hash ^= Message.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Status != 0)
        {
            output.WriteRawTag(8);
            output.WriteInt32(Status);
        }
        if (Message.Length != 0)
        {
            output.WriteRawTag(18);
            output.WriteString(Message);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Status != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
        }
        if (Message.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceSetResult other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Status != 0)
        {
            Status = other.Status;
        }
        if (other.Message.Length != 0)
        {
            Message = other.Message;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        Status = input.ReadInt32();
                        break;
                    }
                case 18:
                    {
                        Message = input.ReadString();
                        break;
                    }
            }
        }
    }

}

/// <summary>
/// GETTER/SETTER
/// </summary>
public sealed partial class InOutDeviceStatusInfo : pb::IMessage<InOutDeviceStatusInfo>
{
    private static readonly pb::MessageParser<InOutDeviceStatusInfo> _parser = new pb::MessageParser<InOutDeviceStatusInfo>(() => new InOutDeviceStatusInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InOutDeviceStatusInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::NhmsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InOutDeviceStatusInfo()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InOutDeviceStatusInfo(InOutDeviceStatusInfo other) : this()
    {
        deviceId_ = other.deviceId_;
        enabled_ = other.enabled_;
        status_ = other.status_;
        temperature_ = other.temperature_;
        load_ = other.load_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InOutDeviceStatusInfo Clone()
    {
        return new InOutDeviceStatusInfo(this);
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 1;
    private string deviceId_ = "";
    /// <summary>
    /// get/set
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId
    {
        get { return deviceId_; }
        set
        {
            deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 2;
    private bool enabled_;
    /// <summary>
    /// get/set 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled
    {
        get { return enabled_; }
        set
        {
            enabled_ = value;
        }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::InOutDeviceStatusInfo.Types.Status status_ = global::InOutDeviceStatusInfo.Types.Status.NotSetInvalid;
    /// <summary>
    /// immutable?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InOutDeviceStatusInfo.Types.Status Status
    {
        get { return status_; }
        set
        {
            status_ = value;
        }
    }

    /// <summary>Field number for the "temperature" field.</summary>
    public const int TemperatureFieldNumber = 4;
    private double temperature_;
    /// <summary>
    /// immutable
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Temperature
    {
        get { return temperature_; }
        set
        {
            temperature_ = value;
        }
    }

    /// <summary>Field number for the "load" field.</summary>
    public const int LoadFieldNumber = 5;
    private double load_;
    /// <summary>
    /// immutable
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Load
    {
        get { return load_; }
        set
        {
            load_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as InOutDeviceStatusInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InOutDeviceStatusInfo other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (DeviceId != other.DeviceId) return false;
        if (Enabled != other.Enabled) return false;
        if (Status != other.Status) return false;
        if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Temperature, other.Temperature)) return false;
        if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Load, other.Load)) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
        if (Enabled != false) hash ^= Enabled.GetHashCode();
        if (Status != global::InOutDeviceStatusInfo.Types.Status.NotSetInvalid) hash ^= Status.GetHashCode();
        if (Temperature != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Temperature);
        if (Load != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Load);
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (DeviceId.Length != 0)
        {
            output.WriteRawTag(10);
            output.WriteString(DeviceId);
        }
        if (Enabled != false)
        {
            output.WriteRawTag(16);
            output.WriteBool(Enabled);
        }
        if (Status != global::InOutDeviceStatusInfo.Types.Status.NotSetInvalid)
        {
            output.WriteRawTag(24);
            output.WriteEnum((int)Status);
        }
        if (Temperature != 0D)
        {
            output.WriteRawTag(33);
            output.WriteDouble(Temperature);
        }
        if (Load != 0D)
        {
            output.WriteRawTag(41);
            output.WriteDouble(Load);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (DeviceId.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
        }
        if (Enabled != false)
        {
            size += 1 + 1;
        }
        if (Status != global::InOutDeviceStatusInfo.Types.Status.NotSetInvalid)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Status);
        }
        if (Temperature != 0D)
        {
            size += 1 + 8;
        }
        if (Load != 0D)
        {
            size += 1 + 8;
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InOutDeviceStatusInfo other)
    {
        if (other == null)
        {
            return;
        }
        if (other.DeviceId.Length != 0)
        {
            DeviceId = other.DeviceId;
        }
        if (other.Enabled != false)
        {
            Enabled = other.Enabled;
        }
        if (other.Status != global::InOutDeviceStatusInfo.Types.Status.NotSetInvalid)
        {
            Status = other.Status;
        }
        if (other.Temperature != 0D)
        {
            Temperature = other.Temperature;
        }
        if (other.Load != 0D)
        {
            Load = other.Load;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        DeviceId = input.ReadString();
                        break;
                    }
                case 16:
                    {
                        Enabled = input.ReadBool();
                        break;
                    }
                case 24:
                    {
                        Status = (global::InOutDeviceStatusInfo.Types.Status)input.ReadEnum();
                        break;
                    }
                case 33:
                    {
                        Temperature = input.ReadDouble();
                        break;
                    }
                case 41:
                    {
                        Load = input.ReadDouble();
                        break;
                    }
            }
        }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the InOutDeviceStatusInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types
    {
        public enum Status
        {
            [pbr::OriginalName("NOT_SET_INVALID")] NotSetInvalid = 0,
            [pbr::OriginalName("PENDING")] Pending = 1,
            [pbr::OriginalName("STOPPED")] Stopped = 2,
            [pbr::OriginalName("MINING")] Mining = 3,
            [pbr::OriginalName("BENCHMARKING")] Benchmarking = 4,
            [pbr::OriginalName("ERROR")] Error = 5,
            [pbr::OriginalName("DISABLED")] Disabled = 6,
        }

    }
    #endregion

}

/// <summary>
/// GETTER/SETTER
/// does this apply to devices that have multuple per fan speed settings? probably YES
/// </summary>
public sealed partial class InOutDeviceFanSpeedRPM : pb::IMessage<InOutDeviceFanSpeedRPM>
{
    private static readonly pb::MessageParser<InOutDeviceFanSpeedRPM> _parser = new pb::MessageParser<InOutDeviceFanSpeedRPM>(() => new InOutDeviceFanSpeedRPM());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InOutDeviceFanSpeedRPM> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::NhmsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InOutDeviceFanSpeedRPM()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InOutDeviceFanSpeedRPM(InOutDeviceFanSpeedRPM other) : this()
    {
        deviceId_ = other.deviceId_;
        fanSpeed_ = other.fanSpeed_;
        minFanSpeed_ = other.minFanSpeed_;
        maxFanSpeed_ = other.maxFanSpeed_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InOutDeviceFanSpeedRPM Clone()
    {
        return new InOutDeviceFanSpeedRPM(this);
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 1;
    private string deviceId_ = "";
    /// <summary>
    /// used for setter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId
    {
        get { return deviceId_; }
        set
        {
            deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "fan_speed" field.</summary>
    public const int FanSpeedFieldNumber = 2;
    private int fanSpeed_;
    /// <summary>
    /// getter/setter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FanSpeed
    {
        get { return fanSpeed_; }
        set
        {
            fanSpeed_ = value;
        }
    }

    /// <summary>Field number for the "min_fan_speed" field.</summary>
    public const int MinFanSpeedFieldNumber = 3;
    private int minFanSpeed_;
    /// <summary>
    /// immutable getter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinFanSpeed
    {
        get { return minFanSpeed_; }
        set
        {
            minFanSpeed_ = value;
        }
    }

    /// <summary>Field number for the "max_fan_speed" field.</summary>
    public const int MaxFanSpeedFieldNumber = 4;
    private int maxFanSpeed_;
    /// <summary>
    /// immutable getter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxFanSpeed
    {
        get { return maxFanSpeed_; }
        set
        {
            maxFanSpeed_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as InOutDeviceFanSpeedRPM);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InOutDeviceFanSpeedRPM other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (DeviceId != other.DeviceId) return false;
        if (FanSpeed != other.FanSpeed) return false;
        if (MinFanSpeed != other.MinFanSpeed) return false;
        if (MaxFanSpeed != other.MaxFanSpeed) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
        if (FanSpeed != 0) hash ^= FanSpeed.GetHashCode();
        if (MinFanSpeed != 0) hash ^= MinFanSpeed.GetHashCode();
        if (MaxFanSpeed != 0) hash ^= MaxFanSpeed.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (DeviceId.Length != 0)
        {
            output.WriteRawTag(10);
            output.WriteString(DeviceId);
        }
        if (FanSpeed != 0)
        {
            output.WriteRawTag(16);
            output.WriteInt32(FanSpeed);
        }
        if (MinFanSpeed != 0)
        {
            output.WriteRawTag(24);
            output.WriteInt32(MinFanSpeed);
        }
        if (MaxFanSpeed != 0)
        {
            output.WriteRawTag(32);
            output.WriteInt32(MaxFanSpeed);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (DeviceId.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
        }
        if (FanSpeed != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(FanSpeed);
        }
        if (MinFanSpeed != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinFanSpeed);
        }
        if (MaxFanSpeed != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxFanSpeed);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InOutDeviceFanSpeedRPM other)
    {
        if (other == null)
        {
            return;
        }
        if (other.DeviceId.Length != 0)
        {
            DeviceId = other.DeviceId;
        }
        if (other.FanSpeed != 0)
        {
            FanSpeed = other.FanSpeed;
        }
        if (other.MinFanSpeed != 0)
        {
            MinFanSpeed = other.MinFanSpeed;
        }
        if (other.MaxFanSpeed != 0)
        {
            MaxFanSpeed = other.MaxFanSpeed;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        DeviceId = input.ReadString();
                        break;
                    }
                case 16:
                    {
                        FanSpeed = input.ReadInt32();
                        break;
                    }
                case 24:
                    {
                        MinFanSpeed = input.ReadInt32();
                        break;
                    }
                case 32:
                    {
                        MaxFanSpeed = input.ReadInt32();
                        break;
                    }
            }
        }
    }

}

/// <summary>
/// GETTER
/// getter for our devices
/// TODO add variable info here as well like fan speed and temperature and benchmarks
/// </summary>
public sealed partial class OutDeviceInfo : pb::IMessage<OutDeviceInfo>
{
    private static readonly pb::MessageParser<OutDeviceInfo> _parser = new pb::MessageParser<OutDeviceInfo>(() => new OutDeviceInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OutDeviceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::NhmsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutDeviceInfo()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutDeviceInfo(OutDeviceInfo other) : this()
    {
        deviceId_ = other.deviceId_;
        name_ = other.name_;
        type_ = other.type_;
        vendor_ = other.vendor_;
        statusInfo_ = other.statusInfo_ != null ? other.statusInfo_.Clone() : null;
        fanSpeedInfo_ = other.fanSpeedInfo_ != null ? other.fanSpeedInfo_.Clone() : null;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutDeviceInfo Clone()
    {
        return new OutDeviceInfo(this);
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 1;
    private string deviceId_ = "";
    /// <summary>
    /// immutable
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId
    {
        get { return deviceId_; }
        set
        {
            deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name
    {
        get { return name_; }
        set
        {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::OutDeviceInfo.Types.Type type_ = global::OutDeviceInfo.Types.Type.Cpu;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::OutDeviceInfo.Types.Type Type
    {
        get { return type_; }
        set
        {
            type_ = value;
        }
    }

    /// <summary>Field number for the "vendor" field.</summary>
    public const int VendorFieldNumber = 4;
    private global::OutDeviceInfo.Types.Vendor vendor_ = global::OutDeviceInfo.Types.Vendor.Amd;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::OutDeviceInfo.Types.Vendor Vendor
    {
        get { return vendor_; }
        set
        {
            vendor_ = value;
        }
    }

    /// <summary>Field number for the "status_info" field.</summary>
    public const int StatusInfoFieldNumber = 5;
    private global::InOutDeviceStatusInfo statusInfo_;
    /// <summary>
    /// status
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InOutDeviceStatusInfo StatusInfo
    {
        get { return statusInfo_; }
        set
        {
            statusInfo_ = value;
        }
    }

    /// <summary>Field number for the "fan_speed_info" field.</summary>
    public const int FanSpeedInfoFieldNumber = 6;
    private global::InOutDeviceFanSpeedRPM fanSpeedInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::InOutDeviceFanSpeedRPM FanSpeedInfo
    {
        get { return fanSpeedInfo_; }
        set
        {
            fanSpeedInfo_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as OutDeviceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OutDeviceInfo other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (DeviceId != other.DeviceId) return false;
        if (Name != other.Name) return false;
        if (Type != other.Type) return false;
        if (Vendor != other.Vendor) return false;
        if (!object.Equals(StatusInfo, other.StatusInfo)) return false;
        if (!object.Equals(FanSpeedInfo, other.FanSpeedInfo)) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
        if (Name.Length != 0) hash ^= Name.GetHashCode();
        if (Type != global::OutDeviceInfo.Types.Type.Cpu) hash ^= Type.GetHashCode();
        if (Vendor != global::OutDeviceInfo.Types.Vendor.Amd) hash ^= Vendor.GetHashCode();
        if (statusInfo_ != null) hash ^= StatusInfo.GetHashCode();
        if (fanSpeedInfo_ != null) hash ^= FanSpeedInfo.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (DeviceId.Length != 0)
        {
            output.WriteRawTag(10);
            output.WriteString(DeviceId);
        }
        if (Name.Length != 0)
        {
            output.WriteRawTag(18);
            output.WriteString(Name);
        }
        if (Type != global::OutDeviceInfo.Types.Type.Cpu)
        {
            output.WriteRawTag(24);
            output.WriteEnum((int)Type);
        }
        if (Vendor != global::OutDeviceInfo.Types.Vendor.Amd)
        {
            output.WriteRawTag(32);
            output.WriteEnum((int)Vendor);
        }
        if (statusInfo_ != null)
        {
            output.WriteRawTag(42);
            output.WriteMessage(StatusInfo);
        }
        if (fanSpeedInfo_ != null)
        {
            output.WriteRawTag(50);
            output.WriteMessage(FanSpeedInfo);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (DeviceId.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
        }
        if (Name.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
        }
        if (Type != global::OutDeviceInfo.Types.Type.Cpu)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
        }
        if (Vendor != global::OutDeviceInfo.Types.Vendor.Amd)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Vendor);
        }
        if (statusInfo_ != null)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(StatusInfo);
        }
        if (fanSpeedInfo_ != null)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(FanSpeedInfo);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OutDeviceInfo other)
    {
        if (other == null)
        {
            return;
        }
        if (other.DeviceId.Length != 0)
        {
            DeviceId = other.DeviceId;
        }
        if (other.Name.Length != 0)
        {
            Name = other.Name;
        }
        if (other.Type != global::OutDeviceInfo.Types.Type.Cpu)
        {
            Type = other.Type;
        }
        if (other.Vendor != global::OutDeviceInfo.Types.Vendor.Amd)
        {
            Vendor = other.Vendor;
        }
        if (other.statusInfo_ != null)
        {
            if (statusInfo_ == null)
            {
                StatusInfo = new global::InOutDeviceStatusInfo();
            }
            StatusInfo.MergeFrom(other.StatusInfo);
        }
        if (other.fanSpeedInfo_ != null)
        {
            if (fanSpeedInfo_ == null)
            {
                FanSpeedInfo = new global::InOutDeviceFanSpeedRPM();
            }
            FanSpeedInfo.MergeFrom(other.FanSpeedInfo);
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        DeviceId = input.ReadString();
                        break;
                    }
                case 18:
                    {
                        Name = input.ReadString();
                        break;
                    }
                case 24:
                    {
                        Type = (global::OutDeviceInfo.Types.Type)input.ReadEnum();
                        break;
                    }
                case 32:
                    {
                        Vendor = (global::OutDeviceInfo.Types.Vendor)input.ReadEnum();
                        break;
                    }
                case 42:
                    {
                        if (statusInfo_ == null)
                        {
                            StatusInfo = new global::InOutDeviceStatusInfo();
                        }
                        input.ReadMessage(StatusInfo);
                        break;
                    }
                case 50:
                    {
                        if (fanSpeedInfo_ == null)
                        {
                            FanSpeedInfo = new global::InOutDeviceFanSpeedRPM();
                        }
                        input.ReadMessage(FanSpeedInfo);
                        break;
                    }
            }
        }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the OutDeviceInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types
    {
        public enum Type
        {
            /// <summary>
            /// start enums with 1 enum default types N/A
            /// </summary>
            [pbr::OriginalName("CPU")] Cpu = 0,
            [pbr::OriginalName("GPU")] Gpu = 1,
        }

        public enum Vendor
        {
            [pbr::OriginalName("AMD")] Amd = 0,
            [pbr::OriginalName("NVIDIA")] Nvidia = 1,
            [pbr::OriginalName("INTEL")] Intel = 2,
        }

    }
    #endregion

}

/// <summary>
/// all devices
/// </summary>
public sealed partial class OutDevicesInfo : pb::IMessage<OutDevicesInfo>
{
    private static readonly pb::MessageParser<OutDevicesInfo> _parser = new pb::MessageParser<OutDevicesInfo>(() => new OutDevicesInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OutDevicesInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::NhmsReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutDevicesInfo()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutDevicesInfo(OutDevicesInfo other) : this()
    {
        devices_ = other.devices_.Clone();
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutDevicesInfo Clone()
    {
        return new OutDevicesInfo(this);
    }

    /// <summary>Field number for the "devices" field.</summary>
    public const int DevicesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::OutDeviceInfo> _repeated_devices_codec
        = pb::FieldCodec.ForMessage(10, global::OutDeviceInfo.Parser);
    private readonly pbc::RepeatedField<global::OutDeviceInfo> devices_ = new pbc::RepeatedField<global::OutDeviceInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::OutDeviceInfo> Devices
    {
        get { return devices_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as OutDevicesInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OutDevicesInfo other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (!devices_.Equals(other.devices_)) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        hash ^= devices_.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        devices_.WriteTo(output, _repeated_devices_codec);
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        size += devices_.CalculateSize(_repeated_devices_codec);
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OutDevicesInfo other)
    {
        if (other == null)
        {
            return;
        }
        devices_.Add(other.devices_);
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        devices_.AddEntriesFrom(input, _repeated_devices_codec);
                        break;
                    }
            }
        }
    }

}

/// <summary>
/// single device get is error prone user might pass in invalid DeviceID
/// </summary>
public sealed partial class InGetDeviceInfo : pb::IMessage<InGetDeviceInfo>
{
    private static readonly pb::MessageParser<InGetDeviceInfo> _parser = new pb::MessageParser<InGetDeviceInfo>(() => new InGetDeviceInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InGetDeviceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::NhmsReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InGetDeviceInfo()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InGetDeviceInfo(InGetDeviceInfo other) : this()
    {
        deviceId_ = other.deviceId_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InGetDeviceInfo Clone()
    {
        return new InGetDeviceInfo(this);
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 1;
    private string deviceId_ = "";
    /// <summary>
    /// used for setter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId
    {
        get { return deviceId_; }
        set
        {
            deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as InGetDeviceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InGetDeviceInfo other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (DeviceId != other.DeviceId) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (DeviceId.Length != 0)
        {
            output.WriteRawTag(10);
            output.WriteString(DeviceId);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (DeviceId.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InGetDeviceInfo other)
    {
        if (other == null)
        {
            return;
        }
        if (other.DeviceId.Length != 0)
        {
            DeviceId = other.DeviceId;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        DeviceId = input.ReadString();
                        break;
                    }
            }
        }
    }

}

public sealed partial class OutGetDeviceInfoResult : pb::IMessage<OutGetDeviceInfoResult>
{
    private static readonly pb::MessageParser<OutGetDeviceInfoResult> _parser = new pb::MessageParser<OutGetDeviceInfoResult>(() => new OutGetDeviceInfoResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OutGetDeviceInfoResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::NhmsReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutGetDeviceInfoResult()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutGetDeviceInfoResult(OutGetDeviceInfoResult other) : this()
    {
        status_ = other.status_;
        message_ = other.message_;
        result_ = other.result_ != null ? other.result_.Clone() : null;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutGetDeviceInfoResult Clone()
    {
        return new OutGetDeviceInfoResult(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    /// immutable getter 0 is ok other is ERROR
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status
    {
        get { return status_; }
        set
        {
            status_ = value;
        }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    /// <summary>
    /// immutable getter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message
    {
        get { return message_; }
        set
        {
            message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private global::OutDeviceInfo result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::OutDeviceInfo Result
    {
        get { return result_; }
        set
        {
            result_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as OutGetDeviceInfoResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OutGetDeviceInfoResult other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Status != other.Status) return false;
        if (Message != other.Message) return false;
        if (!object.Equals(Result, other.Result)) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Status != 0) hash ^= Status.GetHashCode();
        if (Message.Length != 0) hash ^= Message.GetHashCode();
        if (result_ != null) hash ^= Result.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Status != 0)
        {
            output.WriteRawTag(8);
            output.WriteInt32(Status);
        }
        if (Message.Length != 0)
        {
            output.WriteRawTag(18);
            output.WriteString(Message);
        }
        if (result_ != null)
        {
            output.WriteRawTag(26);
            output.WriteMessage(Result);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Status != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
        }
        if (Message.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
        }
        if (result_ != null)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OutGetDeviceInfoResult other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Status != 0)
        {
            Status = other.Status;
        }
        if (other.Message.Length != 0)
        {
            Message = other.Message;
        }
        if (other.result_ != null)
        {
            if (result_ == null)
            {
                Result = new global::OutDeviceInfo();
            }
            Result.MergeFrom(other.Result);
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 8:
                    {
                        Status = input.ReadInt32();
                        break;
                    }
                case 18:
                    {
                        Message = input.ReadString();
                        break;
                    }
                case 26:
                    {
                        if (result_ == null)
                        {
                            Result = new global::OutDeviceInfo();
                        }
                        input.ReadMessage(Result);
                        break;
                    }
            }
        }
    }

}

/// <summary>
/// GETTER/SETTER?
/// Benchmarking/Mining
/// this is miner plugin / algorithm pair, it serves for ID
/// </summary>
public sealed partial class MinerAlgorithmPair : pb::IMessage<MinerAlgorithmPair>
{
    private static readonly pb::MessageParser<MinerAlgorithmPair> _parser = new pb::MessageParser<MinerAlgorithmPair>(() => new MinerAlgorithmPair());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MinerAlgorithmPair> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::NhmsReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MinerAlgorithmPair()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MinerAlgorithmPair(MinerAlgorithmPair other) : this()
    {
        algorithmIds_ = other.algorithmIds_.Clone();
        algorithmName_ = other.algorithmName_;
        minerId_ = other.minerId_;
        minerName_ = other.minerName_;
        benchmarkedSpeeds_ = other.benchmarkedSpeeds_.Clone();
        activeMiningSpeeds_ = other.activeMiningSpeeds_.Clone();
        powerConsumption_ = other.powerConsumption_;
        extraLaunchParameters_ = other.extraLaunchParameters_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MinerAlgorithmPair Clone()
    {
        return new MinerAlgorithmPair(this);
    }

    /// <summary>Field number for the "algorithm_ids" field.</summary>
    public const int AlgorithmIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_algorithmIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> algorithmIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// repeated because we have dual algorithms
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> AlgorithmIds
    {
        get { return algorithmIds_; }
    }

    /// <summary>Field number for the "algorithm_name" field.</summary>
    public const int AlgorithmNameFieldNumber = 2;
    private string algorithmName_ = "";
    /// <summary>
    /// immutable data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AlgorithmName
    {
        get { return algorithmName_; }
        set
        {
            algorithmName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "miner_id" field.</summary>
    public const int MinerIdFieldNumber = 3;
    private string minerId_ = "";
    /// <summary>
    /// immutable data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MinerId
    {
        get { return minerId_; }
        set
        {
            minerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "miner_name" field.</summary>
    public const int MinerNameFieldNumber = 4;
    private string minerName_ = "";
    /// <summary>
    /// immutable data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MinerName
    {
        get { return minerName_; }
        set
        {
            minerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "benchmarked_speeds" field.</summary>
    public const int BenchmarkedSpeedsFieldNumber = 5;
    private static readonly pb::FieldCodec<double> _repeated_benchmarkedSpeeds_codec
        = pb::FieldCodec.ForDouble(42);
    private readonly pbc::RepeatedField<double> benchmarkedSpeeds_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// put variable info here or separate to new struct/message
    /// benchmarked speeds depend on multiple factors. Miner version, miner-algorithm EXTRA LAUNCH PARAMETERS, gpu driver version, device tdp and clock settings, miner job (proxy should fix this)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> BenchmarkedSpeeds
    {
        get { return benchmarkedSpeeds_; }
    }

    /// <summary>Field number for the "active_mining_speeds" field.</summary>
    public const int ActiveMiningSpeedsFieldNumber = 6;
    private static readonly pb::FieldCodec<double> _repeated_activeMiningSpeeds_codec
        = pb::FieldCodec.ForDouble(50);
    private readonly pbc::RepeatedField<double> activeMiningSpeeds_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// immutable data. NON 0 when mining (if user want's to compare and change benchmarked_speeds @matjaz)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> ActiveMiningSpeeds
    {
        get { return activeMiningSpeeds_; }
    }

    /// <summary>Field number for the "power_consumption" field.</summary>
    public const int PowerConsumptionFieldNumber = 7;
    private int powerConsumption_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PowerConsumption
    {
        get { return powerConsumption_; }
        set
        {
            powerConsumption_ = value;
        }
    }

    /// <summary>Field number for the "extra_launch_parameters" field.</summary>
    public const int ExtraLaunchParametersFieldNumber = 8;
    private string extraLaunchParameters_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExtraLaunchParameters
    {
        get { return extraLaunchParameters_; }
        set
        {
            extraLaunchParameters_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as MinerAlgorithmPair);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MinerAlgorithmPair other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (!algorithmIds_.Equals(other.algorithmIds_)) return false;
        if (AlgorithmName != other.AlgorithmName) return false;
        if (MinerId != other.MinerId) return false;
        if (MinerName != other.MinerName) return false;
        if (!benchmarkedSpeeds_.Equals(other.benchmarkedSpeeds_)) return false;
        if (!activeMiningSpeeds_.Equals(other.activeMiningSpeeds_)) return false;
        if (PowerConsumption != other.PowerConsumption) return false;
        if (ExtraLaunchParameters != other.ExtraLaunchParameters) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        hash ^= algorithmIds_.GetHashCode();
        if (AlgorithmName.Length != 0) hash ^= AlgorithmName.GetHashCode();
        if (MinerId.Length != 0) hash ^= MinerId.GetHashCode();
        if (MinerName.Length != 0) hash ^= MinerName.GetHashCode();
        hash ^= benchmarkedSpeeds_.GetHashCode();
        hash ^= activeMiningSpeeds_.GetHashCode();
        if (PowerConsumption != 0) hash ^= PowerConsumption.GetHashCode();
        if (ExtraLaunchParameters.Length != 0) hash ^= ExtraLaunchParameters.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        algorithmIds_.WriteTo(output, _repeated_algorithmIds_codec);
        if (AlgorithmName.Length != 0)
        {
            output.WriteRawTag(18);
            output.WriteString(AlgorithmName);
        }
        if (MinerId.Length != 0)
        {
            output.WriteRawTag(26);
            output.WriteString(MinerId);
        }
        if (MinerName.Length != 0)
        {
            output.WriteRawTag(34);
            output.WriteString(MinerName);
        }
        benchmarkedSpeeds_.WriteTo(output, _repeated_benchmarkedSpeeds_codec);
        activeMiningSpeeds_.WriteTo(output, _repeated_activeMiningSpeeds_codec);
        if (PowerConsumption != 0)
        {
            output.WriteRawTag(56);
            output.WriteInt32(PowerConsumption);
        }
        if (ExtraLaunchParameters.Length != 0)
        {
            output.WriteRawTag(66);
            output.WriteString(ExtraLaunchParameters);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        size += algorithmIds_.CalculateSize(_repeated_algorithmIds_codec);
        if (AlgorithmName.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AlgorithmName);
        }
        if (MinerId.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(MinerId);
        }
        if (MinerName.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(MinerName);
        }
        size += benchmarkedSpeeds_.CalculateSize(_repeated_benchmarkedSpeeds_codec);
        size += activeMiningSpeeds_.CalculateSize(_repeated_activeMiningSpeeds_codec);
        if (PowerConsumption != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PowerConsumption);
        }
        if (ExtraLaunchParameters.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ExtraLaunchParameters);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MinerAlgorithmPair other)
    {
        if (other == null)
        {
            return;
        }
        algorithmIds_.Add(other.algorithmIds_);
        if (other.AlgorithmName.Length != 0)
        {
            AlgorithmName = other.AlgorithmName;
        }
        if (other.MinerId.Length != 0)
        {
            MinerId = other.MinerId;
        }
        if (other.MinerName.Length != 0)
        {
            MinerName = other.MinerName;
        }
        benchmarkedSpeeds_.Add(other.benchmarkedSpeeds_);
        activeMiningSpeeds_.Add(other.activeMiningSpeeds_);
        if (other.PowerConsumption != 0)
        {
            PowerConsumption = other.PowerConsumption;
        }
        if (other.ExtraLaunchParameters.Length != 0)
        {
            ExtraLaunchParameters = other.ExtraLaunchParameters;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                case 8:
                    {
                        algorithmIds_.AddEntriesFrom(input, _repeated_algorithmIds_codec);
                        break;
                    }
                case 18:
                    {
                        AlgorithmName = input.ReadString();
                        break;
                    }
                case 26:
                    {
                        MinerId = input.ReadString();
                        break;
                    }
                case 34:
                    {
                        MinerName = input.ReadString();
                        break;
                    }
                case 42:
                case 41:
                    {
                        benchmarkedSpeeds_.AddEntriesFrom(input, _repeated_benchmarkedSpeeds_codec);
                        break;
                    }
                case 50:
                case 49:
                    {
                        activeMiningSpeeds_.AddEntriesFrom(input, _repeated_activeMiningSpeeds_codec);
                        break;
                    }
                case 56:
                    {
                        PowerConsumption = input.ReadInt32();
                        break;
                    }
                case 66:
                    {
                        ExtraLaunchParameters = input.ReadString();
                        break;
                    }
            }
        }
    }

}

/// <summary>
/// GETTER/SETTER?
/// </summary>
public sealed partial class DeviceAlgorithmsInfo : pb::IMessage<DeviceAlgorithmsInfo>
{
    private static readonly pb::MessageParser<DeviceAlgorithmsInfo> _parser = new pb::MessageParser<DeviceAlgorithmsInfo>(() => new DeviceAlgorithmsInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceAlgorithmsInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::NhmsReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceAlgorithmsInfo()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceAlgorithmsInfo(DeviceAlgorithmsInfo other) : this()
    {
        deviceId_ = other.deviceId_;
        activeAlgorithm_ = other.activeAlgorithm_ != null ? other.activeAlgorithm_.Clone() : null;
        algorithms_ = other.algorithms_.Clone();
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceAlgorithmsInfo Clone()
    {
        return new DeviceAlgorithmsInfo(this);
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 1;
    private string deviceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId
    {
        get { return deviceId_; }
        set
        {
            deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "active_algorithm" field.</summary>
    public const int ActiveAlgorithmFieldNumber = 2;
    private global::MinerAlgorithmPair activeAlgorithm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MinerAlgorithmPair ActiveAlgorithm
    {
        get { return activeAlgorithm_; }
        set
        {
            activeAlgorithm_ = value;
        }
    }

    /// <summary>Field number for the "algorithms" field.</summary>
    public const int AlgorithmsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::MinerAlgorithmPair> _repeated_algorithms_codec
        = pb::FieldCodec.ForMessage(26, global::MinerAlgorithmPair.Parser);
    private readonly pbc::RepeatedField<global::MinerAlgorithmPair> algorithms_ = new pbc::RepeatedField<global::MinerAlgorithmPair>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MinerAlgorithmPair> Algorithms
    {
        get { return algorithms_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as DeviceAlgorithmsInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceAlgorithmsInfo other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (DeviceId != other.DeviceId) return false;
        if (!object.Equals(ActiveAlgorithm, other.ActiveAlgorithm)) return false;
        if (!algorithms_.Equals(other.algorithms_)) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
        if (activeAlgorithm_ != null) hash ^= ActiveAlgorithm.GetHashCode();
        hash ^= algorithms_.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (DeviceId.Length != 0)
        {
            output.WriteRawTag(10);
            output.WriteString(DeviceId);
        }
        if (activeAlgorithm_ != null)
        {
            output.WriteRawTag(18);
            output.WriteMessage(ActiveAlgorithm);
        }
        algorithms_.WriteTo(output, _repeated_algorithms_codec);
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (DeviceId.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
        }
        if (activeAlgorithm_ != null)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActiveAlgorithm);
        }
        size += algorithms_.CalculateSize(_repeated_algorithms_codec);
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceAlgorithmsInfo other)
    {
        if (other == null)
        {
            return;
        }
        if (other.DeviceId.Length != 0)
        {
            DeviceId = other.DeviceId;
        }
        if (other.activeAlgorithm_ != null)
        {
            if (activeAlgorithm_ == null)
            {
                ActiveAlgorithm = new global::MinerAlgorithmPair();
            }
            ActiveAlgorithm.MergeFrom(other.ActiveAlgorithm);
        }
        algorithms_.Add(other.algorithms_);
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        DeviceId = input.ReadString();
                        break;
                    }
                case 18:
                    {
                        if (activeAlgorithm_ == null)
                        {
                            ActiveAlgorithm = new global::MinerAlgorithmPair();
                        }
                        input.ReadMessage(ActiveAlgorithm);
                        break;
                    }
                case 26:
                    {
                        algorithms_.AddEntriesFrom(input, _repeated_algorithms_codec);
                        break;
                    }
            }
        }
    }

}

/// <summary>
/// GETTER/SETTER?
/// </summary>
public sealed partial class DevicesAlgorithms : pb::IMessage<DevicesAlgorithms>
{
    private static readonly pb::MessageParser<DevicesAlgorithms> _parser = new pb::MessageParser<DevicesAlgorithms>(() => new DevicesAlgorithms());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DevicesAlgorithms> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::NhmsReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DevicesAlgorithms()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DevicesAlgorithms(DevicesAlgorithms other) : this()
    {
        devices_ = other.devices_.Clone();
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DevicesAlgorithms Clone()
    {
        return new DevicesAlgorithms(this);
    }

    /// <summary>Field number for the "devices" field.</summary>
    public const int DevicesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::DeviceAlgorithmsInfo> _repeated_devices_codec
        = pb::FieldCodec.ForMessage(10, global::DeviceAlgorithmsInfo.Parser);
    private readonly pbc::RepeatedField<global::DeviceAlgorithmsInfo> devices_ = new pbc::RepeatedField<global::DeviceAlgorithmsInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DeviceAlgorithmsInfo> Devices
    {
        get { return devices_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as DevicesAlgorithms);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DevicesAlgorithms other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (!devices_.Equals(other.devices_)) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        hash ^= devices_.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        devices_.WriteTo(output, _repeated_devices_codec);
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        size += devices_.CalculateSize(_repeated_devices_codec);
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DevicesAlgorithms other)
    {
        if (other == null)
        {
            return;
        }
        devices_.Add(other.devices_);
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        devices_.AddEntriesFrom(input, _repeated_devices_codec);
                        break;
                    }
            }
        }
    }

}

public sealed partial class UpdateDeviceMiningState : pb::IMessage<UpdateDeviceMiningState>
{
    private static readonly pb::MessageParser<UpdateDeviceMiningState> _parser = new pb::MessageParser<UpdateDeviceMiningState>(() => new UpdateDeviceMiningState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateDeviceMiningState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::NhmsReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDeviceMiningState()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDeviceMiningState(UpdateDeviceMiningState other) : this()
    {
        deviceId_ = other.deviceId_;
        algorithmIds_ = other.algorithmIds_.Clone();
        minerId_ = other.minerId_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDeviceMiningState Clone()
    {
        return new UpdateDeviceMiningState(this);
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 1;
    private string deviceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId
    {
        get { return deviceId_; }
        set
        {
            deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "algorithm_ids" field.</summary>
    public const int AlgorithmIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_algorithmIds_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> algorithmIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> AlgorithmIds
    {
        get { return algorithmIds_; }
    }

    /// <summary>Field number for the "miner_id" field.</summary>
    public const int MinerIdFieldNumber = 3;
    private string minerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MinerId
    {
        get { return minerId_; }
        set
        {
            minerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as UpdateDeviceMiningState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateDeviceMiningState other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (DeviceId != other.DeviceId) return false;
        if (!algorithmIds_.Equals(other.algorithmIds_)) return false;
        if (MinerId != other.MinerId) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
        hash ^= algorithmIds_.GetHashCode();
        if (MinerId.Length != 0) hash ^= MinerId.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (DeviceId.Length != 0)
        {
            output.WriteRawTag(10);
            output.WriteString(DeviceId);
        }
        algorithmIds_.WriteTo(output, _repeated_algorithmIds_codec);
        if (MinerId.Length != 0)
        {
            output.WriteRawTag(26);
            output.WriteString(MinerId);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (DeviceId.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
        }
        size += algorithmIds_.CalculateSize(_repeated_algorithmIds_codec);
        if (MinerId.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(MinerId);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateDeviceMiningState other)
    {
        if (other == null)
        {
            return;
        }
        if (other.DeviceId.Length != 0)
        {
            DeviceId = other.DeviceId;
        }
        algorithmIds_.Add(other.algorithmIds_);
        if (other.MinerId.Length != 0)
        {
            MinerId = other.MinerId;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        DeviceId = input.ReadString();
                        break;
                    }
                case 18:
                case 16:
                    {
                        algorithmIds_.AddEntriesFrom(input, _repeated_algorithmIds_codec);
                        break;
                    }
                case 26:
                    {
                        MinerId = input.ReadString();
                        break;
                    }
            }
        }
    }

}

public sealed partial class SetDeviceEnabledState : pb::IMessage<SetDeviceEnabledState>
{
    private static readonly pb::MessageParser<SetDeviceEnabledState> _parser = new pb::MessageParser<SetDeviceEnabledState>(() => new SetDeviceEnabledState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetDeviceEnabledState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::NhmsReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeviceEnabledState()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeviceEnabledState(SetDeviceEnabledState other) : this()
    {
        deviceId_ = other.deviceId_;
        enabled_ = other.enabled_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeviceEnabledState Clone()
    {
        return new SetDeviceEnabledState(this);
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 1;
    private string deviceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId
    {
        get { return deviceId_; }
        set
        {
            deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 2;
    private bool enabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled
    {
        get { return enabled_; }
        set
        {
            enabled_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as SetDeviceEnabledState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetDeviceEnabledState other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (DeviceId != other.DeviceId) return false;
        if (Enabled != other.Enabled) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
        if (Enabled != false) hash ^= Enabled.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (DeviceId.Length != 0)
        {
            output.WriteRawTag(10);
            output.WriteString(DeviceId);
        }
        if (Enabled != false)
        {
            output.WriteRawTag(16);
            output.WriteBool(Enabled);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (DeviceId.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
        }
        if (Enabled != false)
        {
            size += 1 + 1;
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetDeviceEnabledState other)
    {
        if (other == null)
        {
            return;
        }
        if (other.DeviceId.Length != 0)
        {
            DeviceId = other.DeviceId;
        }
        if (other.Enabled != false)
        {
            Enabled = other.Enabled;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        DeviceId = input.ReadString();
                        break;
                    }
                case 16:
                    {
                        Enabled = input.ReadBool();
                        break;
                    }
            }
        }
    }

}

public sealed partial class StartDevice : pb::IMessage<StartDevice>
{
    private static readonly pb::MessageParser<StartDevice> _parser = new pb::MessageParser<StartDevice>(() => new StartDevice());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartDevice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::NhmsReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartDevice()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartDevice(StartDevice other) : this()
    {
        deviceId_ = other.deviceId_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartDevice Clone()
    {
        return new StartDevice(this);
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 1;
    private string deviceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId
    {
        get { return deviceId_; }
        set
        {
            deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as StartDevice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartDevice other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (DeviceId != other.DeviceId) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (DeviceId.Length != 0)
        {
            output.WriteRawTag(10);
            output.WriteString(DeviceId);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (DeviceId.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartDevice other)
    {
        if (other == null)
        {
            return;
        }
        if (other.DeviceId.Length != 0)
        {
            DeviceId = other.DeviceId;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        DeviceId = input.ReadString();
                        break;
                    }
            }
        }
    }

}

public sealed partial class StopDevice : pb::IMessage<StopDevice>
{
    private static readonly pb::MessageParser<StopDevice> _parser = new pb::MessageParser<StopDevice>(() => new StopDevice());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopDevice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::NhmsReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopDevice()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopDevice(StopDevice other) : this()
    {
        deviceId_ = other.deviceId_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopDevice Clone()
    {
        return new StopDevice(this);
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 1;
    private string deviceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId
    {
        get { return deviceId_; }
        set
        {
            deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as StopDevice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopDevice other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (DeviceId != other.DeviceId) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (DeviceId.Length != 0)
        {
            output.WriteRawTag(10);
            output.WriteString(DeviceId);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (DeviceId.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopDevice other)
    {
        if (other == null)
        {
            return;
        }
        if (other.DeviceId.Length != 0)
        {
            DeviceId = other.DeviceId;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        DeviceId = input.ReadString();
                        break;
                    }
            }
        }
    }

}

public sealed partial class SetDeviceMinerAlgorithmPairEnabledState : pb::IMessage<SetDeviceMinerAlgorithmPairEnabledState>
{
    private static readonly pb::MessageParser<SetDeviceMinerAlgorithmPairEnabledState> _parser = new pb::MessageParser<SetDeviceMinerAlgorithmPairEnabledState>(() => new SetDeviceMinerAlgorithmPairEnabledState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetDeviceMinerAlgorithmPairEnabledState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::NhmsReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeviceMinerAlgorithmPairEnabledState()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeviceMinerAlgorithmPairEnabledState(SetDeviceMinerAlgorithmPairEnabledState other) : this()
    {
        deviceId_ = other.deviceId_;
        algorithmIds_ = other.algorithmIds_.Clone();
        minerId_ = other.minerId_;
        enabled_ = other.enabled_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDeviceMinerAlgorithmPairEnabledState Clone()
    {
        return new SetDeviceMinerAlgorithmPairEnabledState(this);
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 1;
    private string deviceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId
    {
        get { return deviceId_; }
        set
        {
            deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "algorithm_ids" field.</summary>
    public const int AlgorithmIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_algorithmIds_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> algorithmIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// immutable data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> AlgorithmIds
    {
        get { return algorithmIds_; }
    }

    /// <summary>Field number for the "miner_id" field.</summary>
    public const int MinerIdFieldNumber = 3;
    private string minerId_ = "";
    /// <summary>
    /// immutable data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MinerId
    {
        get { return minerId_; }
        set
        {
            minerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 4;
    private bool enabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled
    {
        get { return enabled_; }
        set
        {
            enabled_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as SetDeviceMinerAlgorithmPairEnabledState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetDeviceMinerAlgorithmPairEnabledState other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (DeviceId != other.DeviceId) return false;
        if (!algorithmIds_.Equals(other.algorithmIds_)) return false;
        if (MinerId != other.MinerId) return false;
        if (Enabled != other.Enabled) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
        hash ^= algorithmIds_.GetHashCode();
        if (MinerId.Length != 0) hash ^= MinerId.GetHashCode();
        if (Enabled != false) hash ^= Enabled.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (DeviceId.Length != 0)
        {
            output.WriteRawTag(10);
            output.WriteString(DeviceId);
        }
        algorithmIds_.WriteTo(output, _repeated_algorithmIds_codec);
        if (MinerId.Length != 0)
        {
            output.WriteRawTag(26);
            output.WriteString(MinerId);
        }
        if (Enabled != false)
        {
            output.WriteRawTag(32);
            output.WriteBool(Enabled);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(output);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (DeviceId.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
        }
        size += algorithmIds_.CalculateSize(_repeated_algorithmIds_codec);
        if (MinerId.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(MinerId);
        }
        if (Enabled != false)
        {
            size += 1 + 1;
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetDeviceMinerAlgorithmPairEnabledState other)
    {
        if (other == null)
        {
            return;
        }
        if (other.DeviceId.Length != 0)
        {
            DeviceId = other.DeviceId;
        }
        algorithmIds_.Add(other.algorithmIds_);
        if (other.MinerId.Length != 0)
        {
            MinerId = other.MinerId;
        }
        if (other.Enabled != false)
        {
            Enabled = other.Enabled;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                case 10:
                    {
                        DeviceId = input.ReadString();
                        break;
                    }
                case 18:
                case 16:
                    {
                        algorithmIds_.AddEntriesFrom(input, _repeated_algorithmIds_codec);
                        break;
                    }
                case 26:
                    {
                        MinerId = input.ReadString();
                        break;
                    }
                case 32:
                    {
                        Enabled = input.ReadBool();
                        break;
                    }
            }
        }
    }

}

#endregion


#endregion Designer generated code
